{"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar."}},"/api-reference/client/authenticate":{"title":"Authenticate","data":{"":"Authenticates the user and on successfull authentication, it will return the token of the user.","parameters#Parameters":"id_token : string \nThe id token of the user received from the google oauth2 provider.","code#Code":"curl -X 'POST' '${baseUrl}/api/v1/authenticate' -H 'accept: */*' \n    -H 'x-api-key: YOUR_CLIENT_API_KEY'\n    -H 'Content-Type: application/json' -d '\n        {\n            \"id_token\": \"YOUR_TOKEN_ID\"\n        }\n    '","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"token\": \"da9d6c93-6486-4f2e-b785-84daf8ccfeba\",\n        \"message\": \"success\",\n        \"status\": 200,\n        \"action\": \"signup\",\n        \"code\": 200\n    }\n}"}},"/api-reference/client/create-wallet":{"title":"Create Wallet","data":{"":"Creates a new wallet for the user. The wallet is created for all the whitelisted networks for your API key.","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","parameters#Parameters":"None","code#Code":"curl -X POST '${baseUrl}/api/v1/wallet' \n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"wallets\": [\n        {\n            \"network_name\": \"POLYGON_TESTNET\",\n            \"address\": \"0x0342A54DD44E8744FD185579Af57845Cb0ac6cB0\",\n            \"success\": true\n        }\n        ]\n    }\n}"}},"/api-reference/client/get-wallet":{"title":"Get Wallet","data":{"":"Fetch all the wallets created by the user.","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","parameters#Parameters":"None","code#Code":"curl -X GET '${baseUrl}/api/v1/wallet' \n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"wallets\": [\n            {\n                \"network_name\": \"POLYGON_TESTNET\",\n                \"address\": \"0x0342A54DD44E8744FD185579Af57845Cb0ac6cB0\",\n                \"success\": true\n            }\n        ]\n    }\n}"}},"/api-reference/client/logout":{"title":"Logout","data":{"":"Logout the user from the current Okto session. This will remove the user's session from the Okto server and the user will have to login again to access the resources.","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","parameters#Parameters":"None","code#Code":"curl -X POST '${baseUrl}/api/v1/logout' \n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN'","response#Response":"{\n    \"status\": \"success\",\n}"}},"/api-reference/client/order-details-nft":{"title":"Order Details Nft","data":{"":"Get order details of all the NFTs transferred and received by the user.","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","query-parameters#Query Parameters":"page : number \nPage number for pagination. Default is 1.size : number \nNumber of records per page. Default is 10.order_id : string \nOrder id of the NFT.","code#Code":"curl -X GET '${baseUrl}/api/v1/nft/order_details?order_id=dd784ad9-68f8-49b9-87dc-13723e933eab&page=1&size=500'\n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"count\": 3,\n        \"nfts\": [\n            {\n                \"explorer_smart_contract_url\": \"https://explorer.aptoslabs.com//?network=testnet\",\n                \"description\": \"pro af\",\n                \"type\": \"NFT\",\n                \"collection_id\": \"267e0396-1148-51e2-8554-708f40c64e73\",\n                \"collection_name\": \"super avengers\",\n                \"nft_token_id\": \"\",\n                \"token_uri\": \"ipfs://QmVFPvu8aeJHXyNVxpfftVHaKjRsbtH6dXWscJ2TukM3xi\",\n                \"id\": \"de2dfeff-c3cd-57fd-b918-ebbebbd9a1b7\",\n                \"image\": \"\",\n                \"collection_address\": \"\",\n                \"collection_image\": \"super.avengers.net/vk\",\n                \"network_name\": \"APTOS_TESTNET\",\n                \"network_id\": \"d6fd4680-c28d-37b2-994e-b9d3d4026f91\",\n                \"nft_name\": \"I m pro\"\n            },\n            {\n                \"explorer_smart_contract_url\": \"https://explorer.aptoslabs.com//?network=testnet\",\n                \"description\": \"Lets check\",\n                \"type\": \"NFT\",\n                \"collection_id\": \"267e0396-1148-51e2-8554-708f40c64e73\",\n                \"collection_name\": \"super avengers\",\n                \"nft_token_id\": \"\",\n                \"token_uri\": \"ipfs://QmVFPvu8aeJHXyNVxpfftVHaKjRsbtH6dXWscJ2TukM3xi\",\n                \"id\": \"e3b6db62-eb6e-5e59-b5ee-d67e239124b4\",\n                \"image\": \"\",\n                \"collection_address\": \"\",\n                \"collection_image\": \"super.avengers.net/vk\",\n                \"network_name\": \"APTOS_TESTNET\",\n                \"network_id\": \"d6fd4680-c28d-37b2-994e-b9d3d4026f91\",\n                \"nft_name\": \"Starting again\"\n            },\n            {\n                \"explorer_smart_contract_url\": \"https://explorer.aptoslabs.com/object/?network=mainnet\",\n                \"description\": \"Lets check\",\n                \"type\": \"NFT\",\n                \"collection_id\": \"267e0396-1148-51e2-8554-708f40c64e73\",\n                \"collection_name\": \"super avengers\",\n                \"nft_token_id\": \"\",\n                \"token_uri\": \"ipfs://QmVFPvu8aeJHXyNVxpfftVHaKjRsbtH6dXWscJ2TukM3xi\",\n                \"id\": \"46b95693-4a95-517e-aa3d-7d1439f9a86e\",\n                \"image\": \"\",\n                \"collection_address\": \"\",\n                \"collection_image\": \"super.avengers.net/vk\",\n                \"network_name\": \"APTOS_TESTNET\",\n                \"network_id\": \"d6fd4680-c28d-37b2-994e-b9d3d4026f91\",\n                \"nft_name\": \"Mint NFT for Stan\"\n            }\n        ]\n    }\n}"}},"/api-reference/client/orders-history":{"title":"Orders History","data":{"":"Fetch all the orders of the user, which includes the history of tokens sent and received.","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","query-parameters#Query Parameters":"offset : number \nThe number of items to skip before starting to collect the result set. Default is 0.limit : number \nThe number of items to return. Default is 10.order_id : string \nThe order id to get the specific order details.order_state : string \nThe order state to filter the orders. Possible values are PENDING, SUCCESS, FAILED.","code#Code":"curl -X GET '${baseUrl}/api/v1/orders?offset=0&limit=1&order_id=80f5b553-4650-4943-9721-8db41d78ccc9&order_state=SUCCESS'\n-H 'x-api-key: YOUR_CLIENT_API_KEY' \n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"total\": 3,\n        \"jobs\": [\n            {\n                \"order_id\": \"20b57c3f-7ea3-4531-8bb8-313c870ebc1a\",\n                \"order_type\": \"DEFI_TO_EXT\",\n                \"network_name\": \"APTOS\",\n                \"status\": \"SUCCESS\",\n                \"transaction_hash\": \"\"\n            },\n            {\n                \"order_id\": \"e0f1eac5-4f8c-444c-ac57-898553027ab5\",\n                \"order_type\": \"DEFI_TO_EXT\",\n                \"network_name\": \"APTOS\",\n                \"status\": \"SUCCESS\",\n                \"transaction_hash\": \"\"\n            },\n            {\n                \"order_id\": \"f25d2dfb-c3ca-48cd-8e08-f6ea3601854b\",\n                \"order_type\": \"DEFI_TO_EXT\",\n                \"network_name\": \"APTOS\",\n                \"status\": \"SUCCESS\",\n                \"transaction_hash\": \"\"\n            }\n        ]\n    }\n}"}},"/api-reference/client/raw-transaction-execute":{"title":"Raw Transaction Execute","data":{"":"Execute a raw transaction on a network. The API returns a jobId which can be used to track the status of the transaction.","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","parameters#Parameters":"network_name : string \nName of network to execute transaction on.transaction : object \nThe revelant transaction object of the network. Example: Solana, Ethereum, Polygon","code#Code":"curl -X POST '${baseUrl}/api/v1/rawtransaction/execute' \n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Content-Type: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN' -d '\n    {\n        \"network_name\": \"POLYGON_TESTNET\",\n        \"transaction\": {\n            \"from\": \"0x0342A54DD44E8744FD185579Af57845Cb0ac6cB0\",\n            \"to\": \"0x80322ea18633A1f713e987d65Ae78AcCDAB6e55e\",\n            \"data\": \"0x\",\n            \"value\": \"0x10000\"\n        }\n    }\n'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"jobId\": \"d6ce7f0c-1a7d-441d-bb3e-4e431fae84c9\"\n    }\n}"}},"/api-reference/client/raw-transaction-status":{"title":"Raw Transaction Status","data":{"":"Get the details of the raw transaction status by providing the order_id of the transaction. The response will contain the status of the transaction and the transaction hash if the transaction is successful.","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","query-parameters#Query Parameters":"order_id : string \nOrder ID of the transaction to check.","code#Code":"curl -X GET '${baseUrl}/api/v1/rawtransaction/status?order_id=71b8dfd0-4d5c-49d6-9c6f-a39fa3252b24'\n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"jobs\": [\n            {\n                \"order_id\": \"71b8dfd0-4d5c-49d6-9c6f-a39fa3252b24\",\n                \"network_name\": \"SOLANA_DEVNET\",\n                \"status\": \"SUCCESS\",\n                \"transaction_hash\": \"\"\n            }\n        ]\n    }\n}"}},"/api-reference/client/refresh-token":{"title":"Refresh Token","data":{"":"Get fresh pair of access and refresh tokens for the user using the previous obtained refresh_token, auth_token and device_token.","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","parameters#Parameters":"None","code#Code":"curl -X 'POST' '${baseUrl}/api/v1/refresh_token' -H  'accept: application/json'\n-H 'Authorization: Bearer AUTH_TOKEN'\n-H 'x-refresh-authorization: Bearer REFRESH_TOKEN'\n-H 'x-device-token: DEVICE_TOKEN'\n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-d ''","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"auth_token\": \"NEW_AUTH_TOKEN\",\n        \"message\": \"success\",\n        \"refresh_auth_token\": \"NEW_REFRESH_TOKEN\",\n        \"device_token\": \"\"\n    }\n}"}},"/api-reference/client/supported-networks":{"title":"Supported Networks","data":{"":"Get an array of all the whitelisted networks on your API key.\nHow to whitelist a network? Click here","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","parameters#Parameters":"None","code#Code":"curl -X GET '${baseUrl}/api/v1/supported/networks' \n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"network\": [\n            {\n                \"network_name\": \"POLYGON_TESTNET\",\n                \"chain_id\": \"80001\"\n            }\n        ]\n    }\n}"}},"/api-reference/client/supported-tokens":{"title":"Supported Tokens","data":{"":"Get an array of all the whitelisted tokens on your API key.\nHow to whitelist a token? Click here","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","query-parameters#Query Parameters":"page : number \nPage number. Default is 1.size : number \nNumber of items per page. Default is 10.","code#Code":"curl -X GET '${baseUrl}/api/v1/supported/tokens?page=1&size=10'\n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"tokens\": [\n        {\n            \"token_name\": \"MATIC\",\n            \"token_address\": \"\",\n            \"network_name\": \"POLYGON_TESTNET\"\n        },\n        {\n            \"token_name\": \"USDT\",\n            \"token_address\": \"0x2f7b97837f2d14ba2ed3a4b2282e259126a9b848\",\n            \"network_name\": \"POLYGON_TESTNET\"\n        },\n        {\n            \"token_name\": \"WMATIC\",\n            \"token_address\": \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\",\n            \"network_name\": \"POLYGON_TESTNET\"\n        },\n        {\n            \"token_name\": \"WMATIC\",\n            \"token_address\": \"0x9c3c9283d3e44854697cd22d3faa240cfb032889\",\n            \"network_name\": \"POLYGON_TESTNET\"\n        }\n        ]\n    }\n}"}},"/api-reference/client/set-pin":{"title":"Set Pin","data":{"":"Sets the pin of a new user after the user has been authenticated by the Okto server. The user will be required to set a pin after the first login","parameters#Parameters":"id_token : string \nThe id token of the user received from the google oauth2 provider.token : string \nThe token received from the okto server after authentication.relogin_pin : string \nThe new of the user to be set.purpose : string \nThe purpose of the request. In this case, it is set_pin.","code#Code":"curl -X 'POST' '${baseUrl}/api/v1/set_pin' -H 'accept: */*'\n    -H 'x-api-key: YOUR_CLIENT_API_KEY' \n    -H 'Content-Type: application/json' -d '\n        {\n            \"id_token\": \"YOUR_TOKEN_ID\",\n            \"token\": \"OKTO_TOKEN\",\n            \"relogin_pin\": \"123456\",\n            \"purpose\": \"set_pin\"\n        }\n    '","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"auth_token\": \"ACCESS_TOKEN\",\n        \"message\": \"success\",\n        \"refresh_auth_token\": \"REFRESH_TOKEN\",\n        \"device_token\": \"\"\n    }\n}"}},"/api-reference/client/transfer-nft":{"title":"Transfer Nft","data":{"":"Used to transfer nft from user wallet address to recipient address. The order ID will be returned in the response. The order ID can be used to track the status of the order.","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","parameters#Parameters":"operation_type : string \nType of operation to be performed.network_name : string \nName of the network to perform tranfer on.collection_address : string \nAddress of the collection which needs to be transferred.collection_name : string \nName of the collection which needs to be transferred.quantity : string \nQuantity of the nft to be transferred.recipient_address : string \nAddress of the recipient to whom nft needs to be transferred.nft_address : string \nAddress of the nft which needs to be transferred.","code#Code":"curl -X POST '${baseUrl}/api/v1/nft/transfer'\n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN' -d '\n    {\n        \"operation_type\": \"NFT_TRANSFER\",\n        \"network_name\": \"APTOS TESTNET\",\n        \"collection_address\": \"\",\n        \"collection_name\": \"super avengers\",\n        \"quantity\": \"1\",\n        \"recipient_address\": \"\",\n        \"nft_address\": \"\"\n    }\n'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"order_id\": \"dd784ad9-68f8-49b9-87dc-13723e933eab\"\n    }\n}"}},"/api-reference/client/transfer-tokens":{"title":"Transfer Tokens","data":{"":"Place an order by executing a token transfer. This will transfer the specified quantity of tokens to the recipient address. The order ID will be returned in the response. The order ID can be used to track the status of the order.","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","parameters#Parameters":"network_name : string \nNetwork used for the transfer.token_address : string \nAddress of the token to be transferred.quantity : string \nQuantity of tokens to be transferred.recipient_address : string \nAddress of the recipient address to send tokens to.","code#Code":"curl -X POST '${baseUrl}/api/v1/transfers/tokens/execute'\n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN' -d '\n    {\n        \"network_name\": \"APTOS TESTNET\",\n        \"token_address\": \"0x2f7b97837f2d14ba2ed3a4b2282e259126a9b848\",\n        \"quantity\": \"0.0001\",\n        \"recipient_address\": \"\"\n    }\n'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"orderId\": \"20b57c3f-7ea3-4531-8bb8-313c870ebc1a\"\n    }\n}"}},"/api-reference/client/user-activity":{"title":"User Activity","data":{"":"Get user portfolio activity","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","query-parameters#Query Parameters":"limit : number \nNumber of records to return. Default is 10.offset : number \nNumber of records to skip. Default is 0.","code#Code":"curl -X GET '${baseUrl}/api/v1/portfolio/activity?limit=10&offset=1'\n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"count\": 75,\n        \"activity\": [\n            {\n                \"symbol\": \"USDC\",\n                \"image\": \"\",\n                \"name\": \"USD Coin\",\n                \"short_name\": \"USDC\",\n                \"id\": \"113b8bdb-d0a5-33f4-a95e-46f87f1f34fa\",\n                \"group_id\": \"\",\n                \"description\": \"Transaction with DAPP\",\n                \"quantity\": \"0.1\",\n                \"order_type\": \"WALLET_CONNECT\",\n                \"transfer_type\": \"DEPOSIT\",\n                \"status\": \"COMPLETED\",\n                \"timestamp\": 0,\n                \"tx_hash\": \"\",\n                \"network_id\": \"fb10a9ca-d197-378d-8fb3-fd95345571f3\",\n                \"network_name\": \"SOLANA_DEVNET\",\n                \"network_explorer_url\": \"https://solscan.io/tx/?cluster=devnet\",\n                \"network_symbol\": \"SOL DEVNET\"\n            },\n            {\n                \"symbol\": \"SOL_DEVNET\",\n                \"image\": \"\",\n                \"name\": \"SOL\",\n                \"short_name\": \"SOL_DEVNET\",\n                \"id\": \"624cdf5d-987b-378e-a7fb-d3839e74e5bb\",\n                \"group_id\": \"\",\n                \"description\": \"Transaction with DAPP\",\n                \"quantity\": \"0.01\",\n                \"order_type\": \"WALLET_CONNECT\",\n                \"transfer_type\": \"DEPOSIT\",\n                \"status\": \"COMPLETED\",\n                \"timestamp\": 0,\n                \"tx_hash\": \"\",\n                \"network_id\": \"fb10a9ca-d197-378d-8fb3-fd95345571f3\",\n                \"network_name\": \"SOLANA_DEVNET\",\n                \"network_explorer_url\": \"https://solscan.io/tx/?cluster=devnet\",\n                \"network_symbol\": \"SOL DEVNET\"\n            },\n            {\n                \"symbol\": \"USDC\",\n                \"image\": \"\",\n                \"name\": \"USD Coin\",\n                \"short_name\": \"USDC\",\n                \"id\": \"113b8bdb-d0a5-33f4-a95e-46f87f1f34fa\",\n                \"group_id\": \"\",\n                \"description\": \"Transaction with DAPP\",\n                \"quantity\": \"0.1\",\n                \"order_type\": \"WALLET_CONNECT\",\n                \"transfer_type\": \"DEPOSIT\",\n                \"status\": \"COMPLETED\",\n                \"timestamp\": 0,\n                \"tx_hash\": \"\",\n                \"network_id\": \"fb10a9ca-d197-378d-8fb3-fd95345571f3\",\n                \"network_name\": \"SOLANA_DEVNET\",\n                \"network_explorer_url\": \"https://solscan.io/tx/?cluster=devnet\",\n                \"network_symbol\": \"SOL DEVNET\"\n            },\n            {\n                \"symbol\": \"SOL_DEVNET\",\n                \"image\": \"\",\n                \"name\": \"SOL\",\n                \"short_name\": \"SOL_DEVNET\",\n                \"id\": \"624cdf5d-987b-378e-a7fb-d3839e74e5bb\",\n                \"group_id\": \"\",\n                \"description\": \"Transaction with DAPP\",\n                \"quantity\": \"0.01\",\n                \"order_type\": \"WALLET_CONNECT\",\n                \"transfer_type\": \"DEPOSIT\",\n                \"status\": \"COMPLETED\",\n                \"timestamp\": 0,\n                \"tx_hash\": \"\",\n                \"network_id\": \"fb10a9ca-d197-378d-8fb3-fd95345571f3\",\n                \"network_name\": \"SOLANA_DEVNET\",\n                \"network_explorer_url\": \"https://solscan.io/tx/?cluster=devnet\",\n                \"network_symbol\": \"SOL DEVNET\"\n            }\n        ]\n    }\n}"}},"/api-reference/client/user-details":{"title":"User Details","data":{"":"Get user details using token received from Okto.","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","parameters#Parameters":"None","code#Code":"curl -X GET '${baseUrl}/api/v1/user_from_token' \n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"email\": \"raghav.goyal@coindcx.com\",\n        \"user_id\": \"da9d6c93-6486-4f2e-b785-84daf8ccfeba\",\n        \"created_at\": \"1702060462\",\n        \"freezed\": false,\n        \"freeze_reason\": \"\"\n    }\n}"}},"/api-reference/client/user-portfolio":{"title":"User Portfolio","data":{"":"Get the portfolio data of the user, which includes all the tokens owned by the user across all the networks.","headers#Headers":"Authorization : string \nAuthorization token received from Okto.","parameters#Parameters":"None","code#Code":"curl -X GET '${baseUrl}/api/v1/portfolio'\n-H 'x-api-key: YOUR_CLIENT_API_KEY'\n-H 'accept: application/json' \n-H 'Authorization: Bearer AUTH_TOKEN'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"aggregated_data\": {\n            \"holdings_count\": \"2\",\n            \"holdings_price_inr\": \"0\",\n            \"holdings_price_usdt\": \"0\",\n            \"total_holding_price_inr\": \"0\",\n            \"total_holding_price_usdt\": \"0\"\n        },\n        \"group_tokens\": [\n            {\n                \"id\": \"6ddfc36b-55d2-3b1f-8c45-4b076ae3bb9e\",\n                \"name\": \"APT\",\n                \"symbol\": \"APT_TESTNET\",\n                \"short_name\": \"APT_TESTNET\",\n                \"token_image\": \"\",\n                \"network_id\": \"d6fd4680-c28d-37b2-994e-b9d3d4026f91\",\n                \"is_primary\": false,\n                \"balance\": \"0.006347\",\n                \"holdings_price_usdt\": \"0\",\n                \"holdings_price_inr\": \"0\",\n                \"aggregation_type\": \"token\"\n            },\n            {\n                \"id\": \"624cdf5d-987b-378e-a7fb-d3839e74e5bb\",\n                \"name\": \"SOL\",\n                \"symbol\": \"SOL_DEVNET\",\n                \"short_name\": \"SOL_DEVNET\",\n                \"token_image\": \"\",\n                \"network_id\": \"fb10a9ca-d197-378d-8fb3-fd95345571f3\",\n                \"is_primary\": false,\n                \"balance\": \"0.08\",\n                \"holdings_price_usdt\": \"0\",\n                \"holdings_price_inr\": \"0\",\n                \"aggregation_type\": \"token\"\n            },\n        ]\n    }\n}"}},"/api-reference/server/bulk-order-details":{"title":"Bulk Order Details","data":{"":"Get order details of the all the jobs ongoing by the user using their user_id and bulk_order_id.","headers#Headers":"x-api-key : string \nThe S2S API Key provided by Okto.","url-parameters#URL Parameters":"user_id : string \nUser id of the user.","query-parameters#Query Parameters":"page : number \nPage number for pagination. Default is 1.size : number \nNumber of records per page. Default is 10.bulk_order_id : string \nOrder id of the NFT.","code#Code":"curl -X GET '${baseUrl}/s2s/api/v1/nft/order_details/bb7bee27-a25b-4cff-8784-ae55a3a6ad60?bulk_order_id=dd784ad9-68f8-49b9-87dc-13723e933eab&page=1&size=500'\n-H 'accept: application/json' \n-H 'x-api-key: API_KEY'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n            // These are orders that are in terminal state\n        \"executed\": [\n            {\n                \"bulk_order_id\": \"53825c2a-50c1-49bf-84ef-9b2fe7487b52\",\n                \"job_id\": \"afac7dca-942c-4081-bd88-7cea1d651ccb\",\n                \"status\": \"SUCCESS\",\n                \"order_type\": \"TOKEN_TRANSFER_EXECUTE\",\n                \"network_id\": \"APTOS_TESTNET\"\n            }\n        ],\n        \"open\": []// Orders which are being processed at that point of time,\n        \"pending\": [] // Acknowledged orders, queued. Will be processed after open orders are completed\n    }\n}"}},"/api-reference/server/mint-nft-v2":{"title":"Mint Nft V2","data":{"":"Used to mint a new NFT on a specific network.","headers#Headers":"x-api-key : string \nThe S2S API Key provided by Okto.","parameters#Parameters":"operation_type : string \nThe operation type to be performed.ercType : string \nThe type of ERC standard to be used.network_name : string \nThe network name on which the NFT is to be minted.collection_address : string \nThe address of the collection on which the NFT is to be minted.collection_name : string \nThe name of the collection on which the NFT is to be minted.quantity : string \nThe quantity of NFTs to be minted.metadata : object \nThe metadata of the NFT to be minted.metadata.uri : string \nThe URI of the NFT metadata.metadata.nftName : string \nThe name of the NFT.metadata.description : string \nThe description of the NFT.","code#Code":"curl -X POST '${baseUrl}/s2s/api/v2/nft/mint'\n-H 'accept: application/json' \n-H 'x-api-key: API_KEY' -d '\n    {\n        \"operation_type\": \"NFT_MINT\",\n        \"ercType\": \"ERC721\",\n        \"network_name\": \"APTOS_TESTNET\",\n        \"collection_address\": \"\",\n        \"collection_name\": \"super avengers\",\n        \"quantity\": \"1\",\n        \"metadata\": {\n            \"uri\": \"ipfs://QmVFPvu8aeJHXyNVxpfftVHaKjRsbtH6dXWscJ2TukM3xi\",\n            \"nftName\": \"Mint a NFT\",\n            \"description\": \"Lets check\"\n        }\n    }\n'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"bulk_order_id\": \"ec887fc8-74f5-4342-8ca2-43ac239733f6\"\n    }\n}\nThe developer should use the bulk-order-details APIs for checking the order status"}},"/api-reference/server/mint-nft":{"title":"Mint Nft","data":{"":"Used to mint a new NFT on a specific network.","headers#Headers":"x-api-key : string \nThe S2S API Key provided by Okto.","parameters#Parameters":"operation_type : string \nThe operation type to be performed.ercType : string \nThe type of ERC standard to be used.network_name : string \nThe network name on which the NFT is to be minted.collection_address : string \nThe address of the collection on which the NFT is to be minted.collection_name : string \nThe name of the collection on which the NFT is to be minted.quantity : string \nThe quantity of NFTs to be minted.metadata : object \nThe metadata of the NFT to be minted.metadata.uri : string \nThe URI of the NFT metadata.metadata.nftName : string \nThe name of the NFT.metadata.description : string \nThe description of the NFT.","code#Code":"curl -X POST '${baseUrl}/s2s/api/v1/nft/mint'\n-H 'accept: application/json' \n-H 'x-api-key: API_KEY' -d '\n    {\n        \"operation_type\": \"NFT_MINT\",\n        \"ercType\": \"ERC721\",\n        \"network_name\": \"APTOS_TESTNET\",\n        \"collection_address\": \"\",\n        \"collection_name\": \"super avengers\",\n        \"quantity\": \"1\",\n        \"metadata\": {\n            \"uri\": \"ipfs://QmVFPvu8aeJHXyNVxpfftVHaKjRsbtH6dXWscJ2TukM3xi\",\n            \"nftName\": \"Mint a NFT\",\n            \"description\": \"Lets check\"\n        }\n    }\n'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"order_id\": \"ec887fc8-74f5-4342-8ca2-43ac239733f6\"\n    }\n}"}},"/api-reference/server/order-details-nft":{"title":"Order Details Nft","data":{"":"Get order details of the NFT transferred and received by the user using their user_id and order_id.","headers#Headers":"x-api-key : string \nThe S2S API Key provided by Okto.","url-parameters#URL Parameters":"user_id : string \nUser id of the user.","query-parameters#Query Parameters":"page : number \nPage number for pagination. Default is 1.size : number \nNumber of records per page. Default is 10.order_id : string \nOrder id of the NFT.","code#Code":"curl -X GET '${baseUrl}/s2s/api/v1/nft/order_details/bb7bee27-a25b-4cff-8784-ae55a3a6ad60?order_id=dd784ad9-68f8-49b9-87dc-13723e933eab&page=1&size=500'\n-H 'accept: application/json' \n-H 'x-api-key: API_KEY'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"total\": 1,\n        \"details\": [\n            {\n                \"order_id\": \"dd784ad9-68f8-49b9-87dc-13723e933eab\",\n                \"user_id\": \"bb7bee27-a25b-4cff-8784-ae55a3a6ad60\",\n                \"status\": \"SUCCESS\",\n                \"network_name\": \"APTOS_TESTNET\",\n                \"entity_type\": \"NFT\",\n                \"collection_address\": \"\",\n                \"collection_name\": \"\",\n                \"nft_id\": \"\",\n                \"order_type\": \"NFT_TRANSFER\",\n                \"tx_hash\": \"\"\n            }\n        ]\n    }\n}"}},"/api-reference/server/supported-tokens":{"title":"Supported Tokens","data":{"":"Get an array of all the whitelisted tokens on your API key.\nHow to whitelist a token? Click here","headers#Headers":"x-api-key : string \nThe S2S API Key provided by Okto.","query-parameters#Query Parameters":"page : number \nPage number. Default is 1.size : number \nNumber of items per page. Default is 10.user_id : string \nUser ID of the user for whom you want to get the tokens.","code#Code":"curl -X GET '${baseUrl}/s2s/api/v1/supported/tokens??user_id=80f5b553-4650-4943-9721-8db41d78ccc9&page=1&size=10'\n-H 'accept: application/json' \n-H 'x-api-key: API_KEY'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"tokens\": [\n        {\n            \"token_name\": \"MATIC\",\n            \"token_address\": \"\",\n            \"network_name\": \"POLYGON_TESTNET\"\n        },\n        {\n            \"token_name\": \"USDT\",\n            \"token_address\": \"0x2f7b97837f2d14ba2ed3a4b2282e259126a9b848\",\n            \"network_name\": \"POLYGON_TESTNET\"\n        },\n        {\n            \"token_name\": \"WMATIC\",\n            \"token_address\": \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\",\n            \"network_name\": \"POLYGON_TESTNET\"\n        },\n        {\n            \"token_name\": \"WMATIC\",\n            \"token_address\": \"0x9c3c9283d3e44854697cd22d3faa240cfb032889\",\n            \"network_name\": \"POLYGON_TESTNET\"\n        }\n        ]\n    }\n}"}},"/api-reference/server/transfer-nft-v2":{"title":"Transfer Nft V2","data":{"":"Used to transfer nft from user wallet address to recipient address. The order ID will be returned in the response. The order ID can be used to track the status of the order.","headers#Headers":"x-api-key : string \nThe S2S API Key provided by Okto.","parameters#Parameters":"operation_type : string \nType of operation to be performed.network_name : string \nName of the network to perform tranfer on.collection_address : string \nAddress of the collection which needs to be transferred.collection_name : string \nName of the collection which needs to be transferred.quantity : string \nQuantity of the nft to be transferred.recipient_address : string \nAddress of the recipient to whom nft needs to be transferred.nft_address : string \nAddress of the nft which needs to be transferred.user_id : string \nUser ID of the user who is transferring the nft.","code#Code":"curl -X POST '${baseUrl}/s2s/api/v2/nft/tranfer' \n-H 'accept: application/json' \n-H 'x-api-key: API_KEY' -d '\n    {\n        \"operation_type\": \"NFT_TRANSFER\",\n        \"network_name\": \"APTOS TESTNET\",\n        \"collection_address\": \"\",\n        \"collection_name\": \"super avengers\",\n        \"quantity\": \"1\",\n        \"user_id\": \"d6061eab-2da6-4d79-a225-71f995791e45\",\n        \"recipient_address\": \"\",\n        \"nft_address\": \"\"\n    }\n'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"bulk_order_id\": \"dd784ad9-68f8-49b9-87dc-13723e933eab\"\n    }\n}\nThe developer should use the bulk-order-details APIs for checking the order status"}},"/api-reference/server/transfer-nft":{"title":"Transfer Nft","data":{"":"Used to transfer nft from user wallet address to recipient address. The order ID will be returned in the response. The order ID can be used to track the status of the order.","headers#Headers":"x-api-key : string \nThe S2S API Key provided by Okto.","parameters#Parameters":"operation_type : string \nType of operation to be performed.network_name : string \nName of the network to perform tranfer on.collection_address : string \nAddress of the collection which needs to be transferred.collection_name : string \nName of the collection which needs to be transferred.quantity : string \nQuantity of the nft to be transferred.recipient_address : string \nAddress of the recipient to whom nft needs to be transferred.nft_address : string \nAddress of the nft which needs to be transferred.user_id : string \nUser ID of the user who is transferring the nft.","code#Code":"curl -X POST '${baseUrl}/s2s/api/v1/nft/tranfer' \n-H 'accept: application/json' \n-H 'x-api-key: API_KEY' -d '\n    {\n        \"operation_type\": \"NFT_TRANSFER\",\n        \"network_name\": \"APTOS TESTNET\",\n        \"collection_address\": \"\",\n        \"collection_name\": \"super avengers\",\n        \"quantity\": \"1\",\n        \"user_id\": \"d6061eab-2da6-4d79-a225-71f995791e45\",\n        \"recipient_address\": \"\",\n        \"nft_address\": \"\"\n    }\n'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"order_id\": \"dd784ad9-68f8-49b9-87dc-13723e933eab\"\n    }\n}"}},"/api-reference/server/user-activity":{"title":"User Activity","data":{"":"Get a user's portfolio activity usijng their user_id.","headers#Headers":"x-api-key : string \nThe S2S API Key provided by Okto.","query-parameters#Query Parameters":"user_id : string \nThe user id of the user whose activity data is to be fetched.limit : number \nNumber of records to return. Default is 10.offset : number \nNumber of records to skip. Default is 0.","code#Code":"curl -X GET '${baseUrl}/s2s/api/v1/portfolio/activity?user_id=80f5b553-4650-4943-9721-8db41d78ccc9&limit=10&offset=1'\n-H 'accept: application/json' \n-H 'x-api-key: API_KEY'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"count\": 75,\n        \"activity\": [\n            {\n                \"symbol\": \"USDC\",\n                \"image\": \"\",\n                \"name\": \"USD Coin\",\n                \"short_name\": \"USDC\",\n                \"id\": \"113b8bdb-d0a5-33f4-a95e-46f87f1f34fa\",\n                \"group_id\": \"\",\n                \"description\": \"Transaction with DAPP\",\n                \"quantity\": \"0.1\",\n                \"order_type\": \"WALLET_CONNECT\",\n                \"transfer_type\": \"DEPOSIT\",\n                \"status\": \"COMPLETED\",\n                \"timestamp\": 0,\n                \"tx_hash\": \"\",\n                \"network_id\": \"fb10a9ca-d197-378d-8fb3-fd95345571f3\",\n                \"network_name\": \"SOLANA_DEVNET\",\n                \"network_explorer_url\": \"https://solscan.io/tx/?cluster=devnet\",\n                \"network_symbol\": \"SOL DEVNET\"\n            },\n            {\n                \"symbol\": \"SOL_DEVNET\",\n                \"image\": \"\",\n                \"name\": \"SOL\",\n                \"short_name\": \"SOL_DEVNET\",\n                \"id\": \"624cdf5d-987b-378e-a7fb-d3839e74e5bb\",\n                \"group_id\": \"\",\n                \"description\": \"Transaction with DAPP\",\n                \"quantity\": \"0.01\",\n                \"order_type\": \"WALLET_CONNECT\",\n                \"transfer_type\": \"DEPOSIT\",\n                \"status\": \"COMPLETED\",\n                \"timestamp\": 0,\n                \"tx_hash\": \"\",\n                \"network_id\": \"fb10a9ca-d197-378d-8fb3-fd95345571f3\",\n                \"network_name\": \"SOLANA_DEVNET\",\n                \"network_explorer_url\": \"https://solscan.io/tx/?cluster=devnet\",\n                \"network_symbol\": \"SOL DEVNET\"\n            },\n            {\n                \"symbol\": \"USDC\",\n                \"image\": \"\",\n                \"name\": \"USD Coin\",\n                \"short_name\": \"USDC\",\n                \"id\": \"113b8bdb-d0a5-33f4-a95e-46f87f1f34fa\",\n                \"group_id\": \"\",\n                \"description\": \"Transaction with DAPP\",\n                \"quantity\": \"0.1\",\n                \"order_type\": \"WALLET_CONNECT\",\n                \"transfer_type\": \"DEPOSIT\",\n                \"status\": \"COMPLETED\",\n                \"timestamp\": 0,\n                \"tx_hash\": \"\",\n                \"network_id\": \"fb10a9ca-d197-378d-8fb3-fd95345571f3\",\n                \"network_name\": \"SOLANA_DEVNET\",\n                \"network_explorer_url\": \"https://solscan.io/tx/?cluster=devnet\",\n                \"network_symbol\": \"SOL DEVNET\"\n            },\n            {\n                \"symbol\": \"SOL_DEVNET\",\n                \"image\": \"\",\n                \"name\": \"SOL\",\n                \"short_name\": \"SOL_DEVNET\",\n                \"id\": \"624cdf5d-987b-378e-a7fb-d3839e74e5bb\",\n                \"group_id\": \"\",\n                \"description\": \"Transaction with DAPP\",\n                \"quantity\": \"0.01\",\n                \"order_type\": \"WALLET_CONNECT\",\n                \"transfer_type\": \"DEPOSIT\",\n                \"status\": \"COMPLETED\",\n                \"timestamp\": 0,\n                \"tx_hash\": \"\",\n                \"network_id\": \"fb10a9ca-d197-378d-8fb3-fd95345571f3\",\n                \"network_name\": \"SOLANA_DEVNET\",\n                \"network_explorer_url\": \"https://solscan.io/tx/?cluster=devnet\",\n                \"network_symbol\": \"SOL DEVNET\"\n            }\n        ]\n    }\n}"}},"/api-reference/server/transfer-token-v2":{"title":"Transfer Token V2","data":{"":"Used to transfer ERC20/Native Tokens from user wallet address to recipient address. The order ID will be returned in the response. The bulk order ID can be used to track the status of the order.","headers#Headers":"x-api-key : string \nThe S2S API Key provided by Okto.","parameters#Parameters":"operation_type : string \nType of operation to be performed.network_name : string \nName of the network to perform tranfer on.token_address : string \nAddress of the token to be transferred.quantity : string \nQuantity of tokens to be transferred.recipient_address : string \nAddress of the recipient address to send tokens to.","code#Code":"curl -X POST '${baseUrl}/s2s/api/v2/transfer/tokens/execute/:userId' \n-H 'accept: application/json' \n-H 'x-api-key: API_KEY' -d '\n    {\n        \"network_name\": \"APTOS TESTNET\",\n        \"token_address\": \"0x2f7b97837f2d14ba2ed3a4b2282e259126a9b848\",\n        \"quantity\": \"0.0001\",\n        \"recipient_address\": \"\"\n    }\n'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"bulk_order_id\": \"dd784ad9-68f8-49b9-87dc-13723e933eab\"\n    }\n}\nThe developer should use the bulk-order-details APIs for checking the order status"}},"/api-reference/server/user-nft":{"title":"User Nft","data":{"":"Get the details of all the NFT's owned by the user using the user_id.","headers#Headers":"x-api-key : string \nThe S2S API Key provided by Okto.","query-parameters#Query Parameters":"user_id : string \nThe user id of the user whose portfolio data is to be fetched.","code#Code":"curl -X GET '${baseUrl}/s2s/api/v1/portfolio/nft?user_id=3295b42e-b74e-4cf6-9b6f-9e588405ec18'\n-H 'accept: application/json' \n-H 'x-api-key: API_KEY'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"count\": 2,\n        \"nfts\": [\n            {\n                \"explorer_smart_contract_url\": \"https://explorer.aptoslabs.com//?network=testnet\",\n                \"description\": \"Lets check\",\n                \"type\": \"NFT\",\n                \"collection_id\": \"267e0396-1148-51e2-8554-708f40c64e73\",\n                \"collection_name\": \"super avengers\",\n                \"nft_token_id\": \"\",\n                \"token_uri\": \"ipfs://QmVFPvu8aeJHXyNVxpfftVHaKjRsbtH6dXWscJ2TukM3xi\",\n                \"id\": \"e3b6db62-eb6e-5e59-b5ee-d67e239124b4\",\n                \"image\": \"\",\n                \"collection_address\": \"\",\n                \"collection_image\": \"super.avengers.net/vk\",\n                \"network_name\": \"APTOS_TESTNET\",\n                \"network_id\": \"d6fd4680-c28d-37b2-994e-b9d3d4026f91\",\n                \"nft_name\": \"Starting again\"\n            },\n            {\n                \"explorer_smart_contract_url\": \"https://explorer.aptoslabs.com/object/?network=mainnet\",\n                \"description\": \"Lets check\",\n                \"type\": \"NFT\",\n                \"collection_id\": \"267e0396-1148-51e2-8554-708f40c64e73\",\n                \"collection_name\": \"super avengers\",\n                \"nft_token_id\": \"\",\n                \"token_uri\": \"ipfs://QmVFPvu8aeJHXyNVxpfftVHaKjRsbtH6dXWscJ2TukM3xi\",\n                \"id\": \"46b95693-4a95-517e-aa3d-7d1439f9a86e\",\n                \"image\": \"\",\n                \"collection_address\": \"\",\n                \"collection_image\": \"super.avengers.net/vk\",\n                \"network_name\": \"APTOS_TESTNET\",\n                \"network_id\": \"d6fd4680-c28d-37b2-994e-b9d3d4026f91\",\n                \"nft_name\": \"Mint NFT for Stan\"\n            }\n        ]\n    }\n}"}},"/api-reference/server/user-portfolio":{"title":"User Portfolio","data":{"":"Get the portfolio data of a user using their user_id, which includes all the tokens owned by the user across all the networks.","headers#Headers":"x-api-key : string \nThe S2S API Key provided by Okto.","query-parameters#Query Parameters":"user_id : string \nThe user id of the user whose portfolio data is to be fetched.","code#Code":"curl -X GET '${baseUrl}/s2s/api/v1/portfolio?user_id=80f5b553-4650-4943-9721-8db41d78ccc9'\n-H 'accept: application/json' \n-H 'x-api-key: API_KEY'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"aggregated_data\": {\n            \"holdings_count\": \"2\",\n            \"holdings_price_inr\": \"0\",\n            \"holdings_price_usdt\": \"0\",\n            \"total_holding_price_inr\": \"0\",\n            \"total_holding_price_usdt\": \"0\"\n        },\n        \"group_tokens\": [\n            {\n                \"id\": \"6ddfc36b-55d2-3b1f-8c45-4b076ae3bb9e\",\n                \"name\": \"APT\",\n                \"symbol\": \"APT_TESTNET\",\n                \"short_name\": \"APT_TESTNET\",\n                \"token_image\": \"\",\n                \"network_id\": \"d6fd4680-c28d-37b2-994e-b9d3d4026f91\",\n                \"is_primary\": false,\n                \"balance\": \"0.006347\",\n                \"holdings_price_usdt\": \"0\",\n                \"holdings_price_inr\": \"0\",\n                \"aggregation_type\": \"token\"\n            },\n            {\n                \"id\": \"624cdf5d-987b-378e-a7fb-d3839e74e5bb\",\n                \"name\": \"SOL\",\n                \"symbol\": \"SOL_DEVNET\",\n                \"short_name\": \"SOL_DEVNET\",\n                \"token_image\": \"\",\n                \"network_id\": \"fb10a9ca-d197-378d-8fb3-fd95345571f3\",\n                \"is_primary\": false,\n                \"balance\": \"0.08\",\n                \"holdings_price_usdt\": \"0\",\n                \"holdings_price_inr\": \"0\",\n                \"aggregation_type\": \"token\"\n            },\n        ]\n    }\n}"}},"/api-reference/server/user-wallet":{"title":"User Wallet","data":{"":"Fetch all the wallets created by a user using their user_id.","headers#Headers":"x-api-key : string \nThe S2S API Key provided by Okto.","query-parameters#Query Parameters":"user_id : string \nThe user id of the user whose portfolio data is to be fetched.","code#Code":"curl -X GET '${baseUrl}/s2s/api/v1/wallet?user_id=80f5b553-4650-4943-9721-8db41d78ccc9'\n-H 'accept: application/json' \n-H 'x-api-key: API_KEY'","response#Response":"{\n    \"status\": \"success\",\n    \"data\": {\n        \"wallets\": [\n            {\n                \"network_name\": \"APTOS\",\n                \"address\": \"\",\n                \"network_id\": \"dd50ef5f-58f4-3133-8e25-9c2673a9122f\",\n                \"network_symbol\": \"APT\"\n            },\n            {\n                \"network_name\": \"APTOS_TESTNET\",\n                \"address\": \"\",\n                \"network_id\": \"d6fd4680-c28d-37b2-994e-b9d3d4026f91\",\n                \"network_symbol\": \"APT TESTNET\"\n            },\n            {\n                \"network_name\": \"SOLANA_DEVNET\",\n                \"address\": \"GEjBy2puN8a53darpz7CTbRvSb6wepzhK7s8C3Dww4yg\",\n                \"network_id\": \"fb10a9ca-d197-378d-8fb3-fd95345571f3\",\n                \"network_symbol\": \"SOL DEVNET\"\n            }\n        ]\n    }\n}"}},"/getting-started":{"title":"Getting Started","data":{"":"In this part we will integrate Okto Wallet in React Native/Flutter whether it's for your existing app or a new one, but before you can start using the SDK, you will need an API key to get started.\nRequest an API key from here.","installing#Installing":"Add the SDK to your app using your preferred package manager.\npnpm i okto-sdk-react-native @react-native-async-storage/async-storage axios react-native-webview\nnpm i okto-sdk-react-native @react-native-async-storage/async-storage axios react-native-webview\nyarn add okto-sdk-react-native @react-native-async-storage/async-storage axios react-native-webview","initialize-the-sdk#Initialize the SDK":"You need to first intialize the SDK with the API key to get started.\nYou can do this in the root file of your app, for example App.tsx or index.tsx.\nimport { OktoProvider, BuildType } from 'okto-sdk-react-native';\n<OktoProvider apiKey={OKTO_CLIENT_API} buildType={BuildType.SANDBOX}>\n    <App />\n</OktoProvider>\nAnd we are done🎉! You are now ready to use the SDK in your app.","installing-1#Installing":"Add the SDK to your app using Dart.\nflutter pub add okto_flutter_sdk","initialize-the-sdk-1#Initialize the SDK":"You need to first initialize the SDK with the API key to get started.\nYou can do this in the any file of your app, for example main.dart.\nimport 'package:okto_flutter_sdk/okto_flutter_sdk.dart';\nvoid main() {\n  final okto = Okto('YOUR_CLIENT_API_KEY', BuildType.sandbox);\n  runApp(MyApp());\n}\nAnd we are done🎉! You are now ready to use the SDK in your app.","create-a-new-project#Create a new project":"If you are creating a new project, you can use one of the following commands to create a new project.\nnpx react-native init MyApp\nYou can choose the preferred package manager to create the project. It is reccomended to use yarn for better compatibility with expo.\nyarn create expo-app MyApp\nnpx create-expo-app MyApp","installing-2#Installing":"Add the SDK to your app using your preferred package manager.\npnpm i rn-okto-sdk\nnpm i rn-okto-sdk\nyarn add rn-okto-sdk","setup-your-buildgradle#Setup your build.gradle":"Now before using the SDK, we need to add the following lines to your android/build.gradle file under allprojects property.\nFun fact: In Okto SDK, we've got two ways for your app to chat with the API: Wrappers and the Authenticated Channel. We've cooked up a neat Flutter application binary. It decides which API to call and when to make the call, with the wrappers acting like a guidebook for the binary.\nAnd here's the cool part: The binary not only handles the calls but also ensures that the Authenticated Channel plays nice with Okto SDK servers. It's like having a backstage pass, making sure the JWT validation on your app's side is on point.\nallprojects{\n    repositories{\n        // other maven repositories\n        String storageUrl = \"https://storage.googleapis.com\"\n        maven {\n            url \"$rootDir/../node_modules/rn-okto-sdk/maven-repo\"\n        }\n        maven {\n            url \"$storageUrl/download.flutter.io\"\n        }\n    }\n}\nAlso make sure the minSdk version is set to 24 in your android/build.gradle file.\nbuildscript {\n    ext {\n        ...\n        minSdk = 24\n    }\n    ...\n}","initialize-the-sdk-2#Initialize the SDK":"You need to first intialize the SDK with the API key to get started.\nYou can do this in the root file of your app, for example App.tsx or index.tsx.\nimport { BuildType, init } from \"rn-okto-sdk\";\n...\nconst apiKey = \"YOUR_API_KEY\";\nconst baseUrl = \"https://sandbox-api.okto.tech\";\ninit(apiKey, BuildType.SANDBOX);","running-the-app#Running the app":"You can now run the app using one of the following commands.\nnpx react-native run-android\nor\nnpx react-native run-ios\nexpo start\nAnd we are done🎉! We have setup a new react native app, integrated Okto Wallet and successfully run the app.","create-a-new-project-1#Create a new project":"If you are creating a new Flutter project, you can use the following command.\nflutter create my_app","installing-3#Installing":"Add the SDK to your app using Dart.\nflutter pub add okto_flutter_sdk","initialize-the-sdk-3#Initialize the SDK":"You need to first initialize the SDK with the API key to get started.\nYou can do this in any file of your app, for example main.dart.\nimport 'package:okto_flutter_sdk/okto_flutter_sdk.dart';\nvoid main() {\n  final okto = Okto('YOUR_CLIENT_API_KEY');\n  runApp(MyApp());\n}","running-the-app-1#Running the app":"You can now run the app using the following command.\nflutter run\nAnd we are done🎉! We have setup a new Flutter app, integrated Okto Wallet, and successfully run the app."}},"/guide/app-setup":{"title":"App Setup","data":{"":"We will now start building an app using Okto and its methods.\nBut before we begin exploring, we have included some setup steps that might seem familiar, but rest assured, they're not needed for the SDK, but they will help us in creating a better app.\nSo, feel free to glance over those steps, since our main focus is on the features of Okto.Let's get started with the setup.\nWe have a react native sample app integrated with Okto SDK that you can use as a starting point. You can find it here","install-required-packages#Install required packages":"First, let's install the necessary packages for navigation and screens. We will use @react-navigation/native. You can check the installation guide here. We will also be using react-native-dropdown for the dropdown component.\npnpm i @react-navigation/native react-native-screens react-native-safe-area-context react-native-dropdown-picker\nnpm i @react-navigation/native react-native-screens react-native-safe-area-context react-native-dropdown-picker\nyarn add @react-navigation/native react-native-screens react-native-safe-area-context react-native-dropdown-picker","setup-navigation#Setup Navigation":"We will start by creating a file named navigation.tsx in the root of the project. Then, we will add a stack navigator as shown below.\nimport { createNativeStackNavigator } from 'react-native-screens/native-stack';\nconst Stack = createNativeStackNavigator();\nexport default function Navigation() {\n    return (\n        <Stack.Navigator>\n            // Add screens here\n        </Stack.Navigator>\n    );\n}\nImport the Navigation component into App.tsx and wrap it with NavigationContainer from @react-navigation/native.\nimport { NavigationContainer } from '@react-navigation/native';\nimport Navigation from './navigation';\n...\nexport default function App() {\n    return (\n        <NavigationContainer>\n            <Navigation />\n        </NavigationContainer>\n    );\n}","setup-screens#Setup Screens":"Next, create a dummy screen for navigation testing. Make a new folder named screens at the project's root and create a file named HomeScreen.tsx inside this folder.\nimport { View, Text } from 'react-native';\nconst HomeScreen = () => {\n    return (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n            <Text>Home Screen</Text>\n        </View>\n    );\n}\nexport default HomeScreen;\nAdd the HomeScreen component in navigation.tsx and integrate it into the stack navigator.\nimport HomeScreen from './screens/HomeScreen';\nexport default function Navigation(){\n    return (\n        <Stack.Navigator initialRouteName=\"Home\">\n            <Stack.Screen name=\"Home\" component={HomeScreen} />\n        </Stack.Navigator>\n    )\n}\nFrom any screen, you can navigate to the HomeScreen using navigation.navigate(\"Home\").Great! With that, the setup is complete. You can now start building the app with Okto. 🚀\nA flutter sample app is coming soon  🚀.","setup-screens-1#Setup Screens":"Create a dummy screen for navigation testing. Make a new folder named screens inside the lib folder and create a file named home_screen.dart inside this folder.\nimport 'package:flutter/material.dart';\nclass HomeScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Home Screen'),\n      ),\n      body: Center(\n        child: Text('Home Screen'),\n      ),\n    );\n  }\n}\nGreat! With that, the setup is complete. You can now start building the app with Okto. 🚀"}},"/guide/authenticate/authenticate":{"title":"Authenticate","data":{"":"When a user enters our app, seamless authentication becomes the key to their personalized experience. Using the power of Google OAuth2, we establish user identity efficiently.After a successful log in, Google OAuth2 provides a unique identifier called token_id – think of it as their digital fingerprint. This token_id becomes crucial for Okto wallet authentication and, if needed, for creating new wallets.Let's get coding and see how we can use the token_id and authenticate to authenticate with Okto.\nNote: if you just want to test and see how it works, you can use the following steps to get a token_id and go directly to the Authenticate with Okto section.","setup-google-sign-in#Setup Google Sign-In":"We will first set up the Google Sign-In library in our project. This involves installing the @react-native-google-signin package and configuring it.\npnpm i @react-native-google-signin/google-signin\nnpm i @react-native-google-signin/google-signin\nyarn add @react-native-google-signin/google-signin\nNow we need to configure Google. Now, we will need a web client id which if you don't have, you can use the following steps to get one.\nOnce you have the client id we can configure the Google Sign-In library.\nimport { GoogleSignin } from \"@react-native-google-signin/google-signin\";\nconst webClientId = \"YOUR_WEB_CLIENT_ID\";\nGoogleSignin.configure({\n    // Update scopes as needed in your app\n    scopes: [\"email\", \"profile\"],\n    webClientId\n});","handle-google-sign-in#Handle Google Sign-In":"Now that we have set up the Google Sign-In library, let's handle the sign-in process. Create a new screen and name it login.tsx. In this file, create a function to handle the Google Sign-In process, and call this function when the user presses a button.\nimport { GoogleSignin } from \"@react-native-google-signin/google-signin\";\nimport { Text, Pressable } from \"react-native\";\n...\nconst LoginScreen = () => {\n    async function handleGoogleSignIn() {\n        try {\n            await GoogleSignin.hasPlayServices();\n            const response = await GoogleSignin.signIn();\n            const { idToken } = response;\n        } catch (error) {\n            console.log(\"Something went wrong. Please try again\");\n        }\n    }\n    return (\n        <Pressable onPress={handleGoogleSignIn}>\n            <Text>Connect with Google</Text>\n        </Pressable>\n    );\n};","authenticate-with-okto#Authenticate with Okto":"Now that we have obtained the idToken from Google, we can use it to authenticate with Okto. Utilize the authenticate function from the SDK to perform authentication with Okto.\nNote: The idToken expires in 30 minutes, so it is recommended to authenticate with Okto as soon as possible after obtaining the idToken, or the authenticate process will fail.\nimport {\n  useOkto,\n  type OktoContextType,\n} from 'okto-sdk-react-native';\n...\nconst LoginScreen = () => {\n    const { authenticate } = useOkto() as OktoContextType;\n    ...\n    async const handleGoogleSignIn(){\n        try {\n            ...\n            const { idToken } = response;\n            authenticate(idToken, (result, error) => {\n                if (result) {\n                    console.log('authentication successful');\n                }\n                if (error) {\n                    console.error('authentication error:', error);\n                }\n            });\n        } catch (error) {\n            console.log(\"Something went wrong. Please try again\");\n        }\n    }\n}","existing-user#Existing user":"If the user already has an Okto wallet, the result will contain the authentication status","new-user#New user":"If the user does not have an Okto wallet, they will get a UI prompt to create a new wallet.After a successful authentication, the result will contain the authentication status. You can use this information to determine if the user has authenticated or not.\nWhen a user enters our app, seamless authentication becomes the key to their personalized experience. Using the power of Google OAuth2, we establish user identity efficiently. Additionally, we offer an alternative method using JWT for flexible and secure authentication.","undefined#Authentication Methods":"","undefined#Method 1: Google OAuth2":"After a successful log in, Google OAuth2 provides a unique identifier called token_id – think of it as their digital fingerprint. This token_id becomes crucial for Okto wallet authentication and, if needed, for creating new wallets.Let's get coding and see how we can use the token_id and authenticate to authenticate with Okto.\nNote: if you just want to test and see how it works, you can use the following steps to get a token_id and go directly to the Authenticate with Okto section.","undefined#Method 2: JWT Authentication":"We also support a flexible JWT-based authentication. The client will provide us a JWT directly, which can be verified using methods such as phone OTP or any other verification mechanism. This JWT is then used to authenticate with Okto.To use this method, the provided JWT is passed to the authenticateWithUserId method for verification and authentication.","undefined#Authenticate with Okto":"Here is how you can authenticate with Okto using both methods:See authenticate to authenticate with Okto.","setup-google-sign-in-for-flutter#Setup Google Sign-In for Flutter":"First, add the Google Sign-In dependency to your flutter app:\n  flutter pub add google_sign_in\nNext, configure the Google Sign-In plugin in your Flutter project.","handle-google-sign-in-1#Handle Google Sign-In":"Now that we have set up the Google Sign-In library, let's handle the sign-in process. Create a new Dart file named login.dart. In this file, create a function to handle the Google Sign-In process, and call this function when the user presses a button.\nimport 'package:flutter/material.dart';\nimport 'package:google_sign_in/google_sign_in.dart';\nclass LoginScreen extends StatelessWidget {\n  final webClientId = \"YOUR_WEB_CLIENT_ID\";\n  final GoogleSignIn _googleSignIn = GoogleSignIn(\n    clientId: 'YOUR_CLIENT_ID', // Replace with your client ID\n    serverClientId: 'YOUR_WEB_CLIENT_ID', // Replace with your web client ID\n    scopes: ['email', 'profile']\n  );\n  Future<void> _handleSignIn() async {\n    try {\n      final googleUser = await _googleSignIn.signIn();\n    } catch (error) {\n      print(error);\n    }\n  }\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Sign in with Google'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: _handleSignIn,\n          child: Text('Sign in with Google'),\n        ),\n      ),\n    );\n  }\n}","authenticate-with-okto-1#Authenticate with Okto":"Now that we have obtained the idToken from Google, we can use it to authenticate with Okto. Utilize the authenticate function from the SDK to perform authentication with Okto.\nNote: The idToken expires in 30 minutes, so it is recommended to authenticate with Okto as soon as possible after obtaining the idToken, or the authentication process will fail.\nNote: After authenticating using this method it is required to call the setpin method.\nimport 'package:okto_sdk_flutter/okto_sdk_flutter.dart';\nimport 'package:google_sign_in/google_sign_in.dart';\nimport 'package:flutter/material.dart';\nclass LoginScreen extends StatelessWidget {\n  final GoogleSignIn _googleSignIn = GoogleSignIn(\n    scopes: [\n      'email',\n      'https://www.googleapis.com/auth/contacts.readonly',\n    ],\n  );\n  Future<void> _handleSignIn(BuildContext context) async {\n    try {\n      GoogleSignInAccount? account = await _googleSignIn.signIn();\n      GoogleSignInAuthentication auth = await account!.authentication;\n      String idToken = auth.idToken!;\n      await okto.authenticate(idToken: idToken);\n      ScaffoldMessenger.of(context).showSnackBar(SnackBar(\n        content: Text('Authentication successful'),\n      ));\n    } catch (error) {\n      ScaffoldMessenger.of(context).showSnackBar(SnackBar(\n        content: Text('Authentication failed: $error'),\n      ));\n    }\n  }\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Sign in with Google'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () => _handleSignIn(context),\n          child: Text('Sign in with Google'),\n        ),\n      ),\n    );\n  }\n}","authenticate-with-okto-using-userid-and-jwt#Authenticate with Okto using UserId and JWT":"Besides using the idToken, you can also authenticate with Okto using a userId and any JWT. This method can also be used to authenticate with phone OTP.\nimport 'package:okto_sdk_flutter/okto_sdk_flutter.dart';\nimport 'package:flutter/material.dart';\nclass LoginScreen extends StatelessWidget {\n  Future<void> _handleSignIn(BuildContext context) async {\n    try {\n      await okto.authenticateWithUserId(userId: userId, jwt: jwtToken);\n      ScaffoldMessenger.of(context).showSnackBar(SnackBar(\n        content: Text('Authentication successful'),\n      ));\n    } catch (error) {\n      ScaffoldMessenger.of(context).showSnackBar(SnackBar(\n        content: Text('Authentication failed: $error'),\n      ));\n    }\n  }\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Sign in with Google'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () => _handleSignIn(context),\n          child: Text('Sign in'),\n        ),\n      ),\n    );\n  }\n}\nWe have a react native sample app integrated with Okto SDK that you can use as\na starting point. You can find it\nhere"}},"/guide/authenticate/create-wallet":{"title":"Create Wallet","data":{"":"Once the user is authenticated and does not have a wallet, Okto will prompt the user to create a wallet.\nLet's go through the steps of creating a wallet that are handled by the Okto SDK.","create-wallet-prompt#Create Wallet Prompt":"The first screen the user sees is the wallet prompt, where the user can click on the Activate Wallet button to create a wallet. This action will take the user to the next step.","set-pin#Set PIN":"The user will be prompted to set and confirm a PIN for the wallet. This PIN is used to secure the wallet and is required to access it.","why-do-we-need-a-pin#Why do we need a PIN?":"Setting a PIN for your wallet might seem like a small step, but it is important in ensuring trust and security. Okto's wallet spans across platforms, earning user trust by being self-custodial.This trust extends to vendors too, with a semi-trust relationship between users, Okto, and vendors. To tackle this trilemma, we believe in not putting all the control in one person's hands. Your wallet is your domain, and transaction confirmations are in your hands alone.By setting up a PIN and embracing a policy grounded in two-factor authentication (2FA), we strengthen the security link, making your digital assets safer and sounder. It's about putting control where it belongs – in your hands.","wallet-created#Wallet Created":"Once the PIN is set, wallets are created across all the whitelisted chains on your API key, and the user is taken to the wallet screen. Here, they can start using the wallet for various functionalities."}},"/guide/get-details/fetch-portfolio":{"title":"Fetch Portfolio","data":{"":"We have received the user details and their wallets as well. Now we will get the user's portfolio details. This returns all the token assets owned by the user across all the wallets.","fetch-portfolio#Fetch Portfolio":"First, let's create a new screen with the name user-portfolio.tsx. Fetch the user portfolio details using getPortfolio from Okto and store them in a state.\nimport { useOkto, type OktoContextType, type Portfolio } from 'okto-sdk-react-native';\nimport React, { useState } from 'react';\nimport { View, Text } from \"react-native\";\nconst UserPortfolioScreen = () => {\n    const { getPortfolio } = useOkto() as OktoContextType;\n    const [portfolio, setPortfolio] = useState<Portfolio[]>([]);\n    React.useEffect(() => {\n        getPortfolio()\n              .then((result) => {\n                  setPortfolio(result);\n              })\n              .catch((error) => {\n                  console.error(`error:`, error);\n              });\n    }, []);\n    return (\n        <View style={{ flex: 1, backgroundColor: '#fff' }}>\n            <Text>User Portfolio</Text>\n            <View>\n                {portfolio.map((item, index) => (\n                    <View key={index} style={{ flexDirection: \"row\", justifyContent: \"space-between\", alignItems: 'center' }}>\n                        <View style={{ flexDirection: \"row\", gap: 10 }}>\n                            <Text>{item.token_name}</Text>\n                            <Text>{item.quantity}</Text>\n                        </View>\n                        <Text>{item.amount_in_inr}</Text>\n                    </View>\n                ))}\n            </View>\n        </View>\n    );\n};\nexport default UserPortfolioScreen;","display-portfolio-details#Display Portfolio Details":"Now that we have the portfolio details, we can display them in the app.\nimport { View, Text } from \"react-native\";\nimport React, { useState } from 'react';\nimport { useOkto, type OktoContextType, type Portfolio } from 'okto-sdk-react-native';\nconst UserPortfolioScreen = () => {\n    const { getPortfolio } = useOkto() as OktoContextType;\n    const [portfolio, setPortfolio] = useState<Portfolio[]>([]);\n    React.useEffect(() => {\n        getPortfolio()\n              .then((result) => {\n                  setPortfolio(result);\n              })\n              .catch((error) => {\n                  console.error(`error:`, error);\n              });\n    }, []);\n    return (\n        <View style={{ flex: 1, backgroundColor: '#fff' }}>\n            <Text>User Portfolio</Text>\n            <View>\n                {portfolio.map((item, index) => (\n                    <View key={index} style={{ flexDirection: \"row\", justifyContent: \"space-between\", alignItems: 'center' }}>\n                        <View style={{ flexDirection: \"row\", gap: 10 }}>\n                            <Text>{item.token_name}</Text>\n                            <Text>{item.quantity}</Text>\n                        </View>\n                        <Text>{item.amount_in_inr}</Text>\n                    </View>\n                ))}\n            </View>\n        </View>\n    );\n};\nexport default UserPortfolioScreen;","add-to-navigation#Add to Navigation":"Finally, add the user-portfolio.tsx screen to the navigate from user-profile.tsx.\nimport { View, Button } from 'react-native';\nimport React from 'react';\nimport { useNavigation } from '@react-navigation/native';\nconst UserProfileScreen = () => {\n    const navigation = useNavigation();\n    return (\n        <View style={{ flex: 1, backgroundColor: '#fff' }}>\n            <View style={{ flexDirection: \"row\", justifyContent: \"space-between\", marginTop: 10 }}>\n                <Button\n                    title=\"Portfolio\"\n                    onPress={() => navigation.navigate(\"UserPortfolio\")}\n                />\n            </View>\n            ...\n        </View>\n    );\n};\nexport default UserProfileScreen;","fetch-portfolio-1#Fetch Portfolio":"First, let's create a new screen with the name user_portfolio.dart. Fetch the user portfolio details using getPortfolio from Okto and store them in a state.\nimport 'package:flutter/material.dart';\nimport 'package:okto_sdk_flutter/okto_sdk_flutter.dart';\nclass UserPortfolioScreen extends StatefulWidget {\n  @override\n  _UserPortfolioScreenState createState() => _UserPortfolioScreenState();\n}\nclass _UserPortfolioScreenState extends State<UserPortfolioScreen> {\n  List portfolio = [];\n  @override\n  void initState() {\n    super.initState();\n    _fetchPortfolio();\n  }\n  Future<void> _fetchPortfolio() async {\n  List<Portfolio> result = await okto.userPortfolio();\n  setState(() {\n    portfolio = result;\n  });\n  }\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('User Portfolio'),\n      ),\n      body: Center(\n        child: portfolio.isEmpty\n            ? CircularProgressIndicator()\n            : ListView.builder(\n                itemCount: portfolio.length,\n                itemBuilder: (context, index) {\n                  return ListTile(\n                    title: Text(portfolio[index].tokenName),\n                    subtitle: Text('Quantity: ${portfolio[index].quantity}'),\n                    trailing: Text('Amount: ${portfolio[index].amountInInr} INR'),\n                  );\n                },\n              ),\n      ),\n    );\n  }\n}","display-portfolio-details-1#Display Portfolio Details":"Now that we have the portfolio details, we can display them in the app.\nimport 'package:flutter/material.dart';\nimport 'package:okto_sdk_flutter/okto_sdk_flutter.dart';\nclass UserPortfolioScreen extends StatelessWidget {\n  final List portfolio;\n  UserPortfolioScreen({required this.portfolio});\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('User Portfolio'),\n      ),\n      body: Center(\n        child: ListView.builder(\n          itemCount: portfolio.length,\n          itemBuilder: (context, index) {\n            return ListTile(\n              title: Text(portfolio[index].tokenName),\n              subtitle: Text('Quantity: ${portfolio[index].quantity}'),\n              trailing: Text('Amount: ${portfolio[index].amountInInr} INR'),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\nNow that the user details and their wallets are displayed, in the next step, we will fetch the user's portfolio details and display them in the app."}},"/guide/get-details/fetch-user":{"title":"Fetch User","data":{"":"Now that the user is authenticated and has an Okto wallet, you can fetch the user details from Okto and display them in the app.","fetch-user-details#Fetch User Details":"First, let's create a new screen with the name user-profile.tsx. Fetch the user details using getUserDetails from Okto and store them in a state.\nimport { useOkto, type OktoContextType, type User} from 'okto-sdk-react-native';\nimport React, { useState } from 'react';\nimport { View, Text } from \"react-native\";\nconst UserProfileScreen = () => {\n    const { getUserDetails } = useOkto() as OktoContextType;\n    const [userDetails, setUserDetails] = useState<User | null>(null);\n    React.useEffect(() => {\n        getUserDetails()\n              .then((result) => {\n                setUserDetails(result);\n              })\n              .catch((error) => {\n                console.error(`error:`, error);\n              });\n    }, []);\n    return (\n        <View style={{ flex: 1, backgroundColor: '#fff' }}>\n            <Text>User Details</Text>\n            {userDetails && <View>\n                <Text>{userDetails.user_id}</Text>\n                <Text>{userDetails.email}</Text>\n            </View>}\n        </View>\n    );\n};\nexport default UserProfileScreen;","fetch-user-details-1#Fetch User Details":"First, let's create a new screen with the name user_profile.dart. Fetch the user details using getUserDetails from Okto and store them in a state.\nimport 'package:flutter/material.dart';\nimport 'package:okto_sdk_flutter/okto_sdk_flutter.dart';\nclass UserProfileScreen extends StatefulWidget {\n  @override\n  _UserProfileScreenState createState() => _UserProfileScreenState();\n}\nclass _UserProfileScreenState extends State<UserProfileScreen> {\n  UserDetails? userDetails;\n  @override\n  void initState() {\n    super.initState();\n    _fetchUserDetails();\n  }\n  Future<void> _fetchUserDetails() async {\n  final user = await okto.userDetails();\n  setState(() {\n      userDetails = user;\n  });\n  \n  }\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('User Profile'),\n      ),\n      body: Center(\n        child: userDetails == null\n            ? CircularProgressIndicator()\n            : Column(\n                children: [\n                  Text('User ID: ${userDetails!.userId}'),\n                  Text('Email: ${userDetails!.email}'),\n                ],\n              ),\n      ),\n    );\n  }\n}\nNow that the user details are displayed, in the next step, we will fetch the user's wallet details and display them in the app."}},"/guide/get-details/supported-networks-and-tokens":{"title":"Supported Networks and Tokens","data":{"":"Before the user can transfer assets from and to their wallets, they need to know the networks and tokens supported by your API Key.","fetch-supported-networks-and-tokens#Fetch Supported Networks and Tokens":"First, let's fetch the supported networks and tokens from Okto. Use the getSupportedNetworks and getSupportedTokens methods to obtain the respective data.\nWe will start by creating a new screen with the name supported-chains.tsx and add the required methods.\nimport { useOkto, type OktoContextType, type Token, type Network } from 'okto-sdk-react-native';\nimport React, { useState, useEffect } from 'react';\nimport { View, Text } from 'react-native';\nconst SupportedChainScreen = () => {\n    const { getSupportedNetworks, getSupportedTokens } = useOkto() as OktoContextType;\n    const [networks, setNetworks] = useState<Network[]>([]);\n    const [tokens, setTokens] = useState<Token[]>([]);\n    useEffect(() => {\n        getSupportedNetworks()\n          .then((result) => {\n            setNetworks(result);\n          })\n          .catch((error) => {\n            console.error(`error:`, error);\n          });\n        getSupportedTokens()\n          .then((result) => {\n            setTokens(result);\n          })\n          .catch((error) => {\n            console.error(`error:`, error);\n          });\n    }, []);\n    return (\n        <View style={{ flexDirection: \"row\", backgroundColor: \"#fff\", flex: 1 }}>\n            <View style={{ flex: 0.5 }}>\n                <Text>Supported Networks</Text>\n                <View>\n                    {networks.map((network, index) => (\n                        <View key={index} style={{ marginVertical: 10 }}>\n                            <Text>{network.network_name}</Text>\n                        </View>\n                    ))}\n                </View>\n            </View>\n            <View style={{ flex: 0.5 }}>\n                <Text>Supported Tokens</Text>\n                <View>\n                    {tokens.map((token, index) => (\n                        <View key={index} style={{ marginVertical: 10 }}>\n                            <Text>{token.token_name}</Text>\n                        </View>\n                    ))}\n                </View>\n            </View>\n        </View>\n    );\n};\nexport default SupportedChainScreen;","add-navigation#Add Navigation":"Finally, we need to add a way to navigate to this screen. Let's add a link in the user-profile.tsx to navigate to the supported-chains.tsx.\nimport { Pressable, Text, View } from 'react-native';\nimport React from 'react';\nimport { useNavigation } from '@react-navigation/native';\nconst UserProfileScreen = () => {\n    const navigation = useNavigation();\n    return (\n        <View>\n            ...\n            <View style={{ alignItems: \"center\" }}>\n                <Pressable onPress={() => navigation.navigate(\"SupportedChains\")}>\n                    <Text style={{ color: \"#008AE6\" }}>Check Supported Chains</Text>\n                </Pressable>\n            </View>\n        </View>\n    );\n};\nexport default UserProfileScreen;","fetch-supported-networks-and-tokens-1#Fetch Supported Networks and Tokens":"First, let's fetch the supported networks and tokens from Okto. Use the supportedNetworks and supportedTokens methods to obtain the respective data.\nWe will start by creating a new screen with the name supported_chains.dart and add the required methods.\nimport 'package:flutter/material.dart';\nimport 'package:okto_sdk_flutter/okto_sdk_flutter.dart';\nclass SupportedChainScreen extends StatefulWidget {\n  @override\n  _SupportedChainScreenState createState() => _SupportedChainScreenState();\n}\nclass _SupportedChainScreenState extends State<SupportedChainScreen> {\n  @override\n  void initState() {\n    super.initState();\n    _fetchSupportedData();\n  }\n  Future<void> _fetchSupportedData() async {\n      final networksResult = await okto.supportedNetworks();\n      final tokensResult = await okto.supportedTokens();\n  }\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Supported Networks & Tokens'),\n      ),\n      body: Center(\n          child: TextButton(onPressed: (){\n              _fetchSupportedData();\n          },\n          child: Text('get supported data'),\n          );\n      );\n    );\n  }\n}"}},"/guide/get-details/fetch-wallets":{"title":"Fetch Wallets","data":{"":"Let's continue by adding more information to the User Profile Screen. Add a new section to the screen that will display all wallet information of the user.","fetch-wallets#Fetch Wallets":"First, let's fetch the wallets information of the user using the getWallets method. We will continue developing in the user-profile.tsx.\nimport { useOkto, type OktoContextType, type Wallet } from 'okto-sdk-react-native';\nimport React, { useState } from 'react';\nimport { View, Text } from \"react-native\";\nconst UserProfileScreen = () => {\n    const { getWallets } = useOkto() as OktoContextType;\n    const [userWallets, setUserWallets] = useState<Wallet[]>([]);\n    React.useEffect(() => {\n        getWallets()\n              .then((result) => {\n                setUserWallets(result);\n              })\n              .catch((error) => {\n                console.error(`error:`, error);\n              });\n    }, []);\n    return (\n        <View style={{ flex: 1, backgroundColor: '#fff' }}>\n            <Text>User Wallets</Text>\n            <View>\n                {userWallets.map((wallet, index) => (\n                    <View key={index} style={{ marginVertical: 10 }}>\n                        <Text>{wallet.network_name}</Text>\n                        <Text>{wallet.address}</Text>\n                    </View>\n                ))}\n            </View>\n        </View>\n    );\n};\nexport default UserProfileScreen;","display-wallets#Display Wallets":"Now, we will display the wallets information of the user.\nimport { View, Text } from \"react-native\";\nimport React, { useState } from 'react';\nimport { useOkto, type OktoContextType, type Wallet } from 'okto-sdk-react-native';\nconst UserProfileScreen = () => {\n    const { getWallets } = useOkto() as OktoContextType;\n    const [userWallets, setUserWallets] = useState<Wallet[]>([]);\n    React.useEffect(() => {\n        getWallets()\n              .then((result) => {\n                setUserWallets(result);\n              })\n              .catch((error) => {\n                console.error(`error:`, error);\n              });\n    }, []);\n    return (\n        <View style={{ flex: 1, backgroundColor: '#fff' }}>\n            <Text>User Wallets</Text>\n            <View>\n                {userWallets.map((wallet, index) => (\n                    <View key={index} style={{ marginVertical: 10 }}>\n                        <Text>{wallet.network_name}</Text>\n                        <Text>{wallet.address}</Text>\n                    </View>\n                ))}\n            </View>\n        </View>\n    );\n};\nexport default UserProfileScreen;","fetch-wallets-1#Fetch Wallets":"First, let's fetch the wallets information of the user using the getWallets method. We will continue developing in the user_profile.dart.\nimport 'package:flutter/material.dart';\nimport 'package:okto_sdk_flutter/okto_sdk_flutter.dart';\nclass UserProfileScreen extends StatefulWidget {\n  @override\n  _UserProfileScreenState createState() => _UserProfileScreenState();\n}\nclass _UserProfileScreenState extends State<UserProfileScreen> {\n  List userWallets = [];\n  @override\n  void initState() {\n    super.initState();\n    _fetchWallets();\n  }\n  Future<void> _fetchWallets() async {\n  List wallets = await okto.getWallets();\n  setState(() {\n      userWallets = wallets;\n  });\n  }\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('User Wallets'),\n      ),\n      body: Center(\n        child: userWallets.isEmpty\n            ? CircularProgressIndicator()\n            : ListView.builder(\n                itemCount: userWallets.length,\n                itemBuilder: (context, index) {\n                  return ListTile(\n                    title: Text(userWallets[index].networkName),\n                    subtitle: Text(userWallets[index].address),\n                  );\n                },\n              ),\n      ),\n    );\n  }\n}","display-wallets-1#Display Wallets":"Now, we will display the wallets information of the user.\nimport 'package:flutter/material.dart';\nimport 'package:okto_sdk_flutter/okto_sdk_flutter.dart';\nclass UserProfileScreen extends StatelessWidget {\n  final List userWallets;\n  UserProfileScreen({required this.userWallets});\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('User Wallets'),\n      ),\n      body: Center(\n        child: ListView.builder(\n          itemCount: userWallets.length,\n          itemBuilder: (context, index) {\n            return ListTile(\n              title: Text(userWallets[index].networkName),\n              subtitle: Text(userWallets[index].address),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\nNow that the user details are displayed, in the next step, we will fetch the user's wallet details and display them in the app."}},"/guide/google-authentication-setup":{"title":"Google Authentication Setup","data":{"":"This guide will walk you through the steps to set up a project in Google Console, create an OAuth consent screen, and generate web and Android client IDs for Google authentication.","creating-a-project-in-google-console#Creating a Project in Google Console":"Go to Google Cloud Console and sign in with your Google account.\nClick on the project selector dropdown at the top of the page.\nClick on \"New Project\".\nEnter a name for your project and click \"Create\".\nOnce the project is created, select it from the project selector dropdown.","creating-an-oauth-consent-screen#Creating an OAuth Consent Screen":"In Google Cloud Console, navigate to the \"APIs & Services\" > \"OAuth consent screen\" page from the left sidebar.\nClick on \"Create\" to start setting up your consent screen.\nChoose the user type for your application (Internal or External) and click \"Create\".\nFill out the required fields on the consent screen configuration form:\nApplication name: Enter the name of your application.\nUser support email: Enter an email address where users can contact you for support.\nDeveloper contact information: Provide contact information for the developer of the application.\nClick \"Save and Continue\".","creating-an-android-client-id#Creating an Android Client ID":"In Google Cloud Console, navigate to the \"Credentials\" page under \"APIs & Services\".\nClick on \"Create credentials\" and select \"OAuth client ID\".\nChoose \"Android\" as the application type.\nIn the \"Package name\" field, enter the package name of your Android app (e.g., com.example.myapp).\nIn the \"SHA-1 certificate fingerprint\" field, enter the SHA-1 fingerprint of your signing certificate. You can obtain this fingerprint using keytool or Android Studio. You can use the follwing command to get the fingerprint using keytool\nkeytool -keystore ./android/app/debug.keystore -list -v\nClick \"Create\" to generate your Android client ID.\nCopy the client ID provided.","creating-a-web-client-id#Creating a Web Client ID":"Navigate to the \"Credentials\" page under \"APIs & Services\" in Google Cloud Console.\nClick on \"Create credentials\" and select \"OAuth client ID\".\nChoose \"Web application\" as the application type.\nClick \"Create\" to generate your web client ID.\nCopy the client ID and client secret provided.","conclusion#Conclusion":"You have successfully set up a project in Google Console, created an OAuth consent screen, and generated web and Android client IDs for Google authentication. You can now integrate Google authentication into Android applications using the provided client IDs."}},"/guide/logout":{"title":"Logout","data":{"":"Finally, we can add a log out function for the user. This will revoke the access token and sign out from the Google account as well as from Okto. The user will be redirected to the login screen after the logout.","add-logout-function#Add logout function":"Lets start by adding a function that can handle the logout. This function will sign out the user from the Google account and we can use the logout method from Okto to expire the access token and refresh token and end the session from Okto Wallet as well.\nimport { logout } from 'rn-okto-sdk';\nimport { GoogleSignin } from \"@react-native-google-signin/google-signin\";\n...\nconst UserProfileScreen = () => {\n    \n    ...\n    const handleLogout = async () => {\n        try {\n            await GoogleSignin.revokeAccess();\n            await GoogleSignin.signOut();\n            logout((result, error) => {\n                if(result){\n                    navigation.navigate(\"Login\");\n                }\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n};","add-logout-button#Add logout button":"Now we can add a logout button at the top of the user profile screen to trigger the logout function.\nimport { View, Button } from 'react-native';\nconst UserProfileScreen = () => {\n    ...\n    return (\n        <View style={{ flex: 1, backgroundColor: '#fff' }}>\n            <View style={{ flexDirection: \"row\", justifyContent: \"flex-end\", marginTop: 10 }}>\n                <Button\n                    title=\"Logout\"\n                    onPress={handleLogout}\n                    color=\"red\"\n                />\n            </View>\n            ...\n        </View>\n    )\n}","create-a-logout-screen#Create a logout screen":"Lets start by adding a function that can handle the logout. This function will sign out the user from the Google account and we can use the logout method from Okto to expire the access token and refresh token and end the session from Okto Wallet as well.\nimport 'package:flutter/material.dart';\nimport 'package:google_sign_in/google_sign_in.dart';\nimport 'package:okto_test/loginpage.dart';\nimport 'package:okto_test/okto.dart';\nclass LogoutScreen extends StatefulWidget {\n  const LogoutScreen({super.key});\n  @override\n  State<LogoutScreen> createState() => _LogoutScreenState();\n}\nclass _LogoutScreenState extends State<LogoutScreen> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n          onPressed: () async {\n            try {\n            await GoogleSignIn().signOut();\n            await okto.logout();\n              Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => const LoginPage()));\n            } catch (e) {\n              print(e);\n            }\n          },\n          child: const Text('Logout'),\n        ),\n      ),\n    );\n  }\n}"}},"/guide/mint-nft":{"title":"Mint Nft","data":{"":"Imagine this: your user wants to mint an NFT, but they prefer to do it quietly in the background without any direct user involvement. This is where the server-to-server API feature comes in handy.With this, you can easily integrate NFT minting into automated processes or workflows without bothering the user.We will now explore how to mint an NFT using the Server-to-Server API. For example purposes, we will be using Express and Node.js to create a server, and then we will consume the S2S API to mint an NFT.","setup-a-server#Setup a server":"First lets initialize a new node.js project and install the required packages.\npnpm init -y\npnpm install express typescript @types/node @types/express ts-node axios --save\nnpm init -y\nnpm install express typescript @types/node @types/express ts-node axios --save\nyarn init -y\nyarn add express typescript @types/node @types/express ts-node axios","create-a-server#Create a server":"Now lets create a server using express and typescript.\nimport express, { Request, Response } from 'express';\nconst app = express();\nconst port = 3000;\napp.get('/', (req: Request, res: Response) => {\n    res.send('Hello, World!');\n});\napp.listen(port, () => {\n    console.log(`⚡ Server is running at http://localhost:${port}`);\n});","add-a-route-to-mint-nft#Add a route to mint NFT":"Now lets add a route to mint NFT. We will utilize the Mint NFT API for this. This route will accept the required parameters in the body:\nnetworkName - The network name of the NFT\ncollectionName - The name of the collection\ncollectionAddress - The address of the collection\nquantity - The quantity of NFTs to mint\nmetadata - The metadata of the NFT\nuri - The image of the NFT\nnftName - The name of the NFT\ndescription - The description of the NFT\nYou will need your S2S API Key obtained from Okto.\nimport express, { Request, Response } from 'express';\nimport axios from 'axios';\n...\napp.post('/mint-nft', async (req: Request, res: Response) => {\n    try{\n        const apiEndpoint = '${baseUrl}/s2s/api/v1/nft/mint';\n         const {\n            networkName,\n            collectionName,\n            collectionAddress,\n            quantity,\n            metadata,\n        } = req.body;\n        const apiKey = \"YOUR_S2S_API_KEY\"\n        const headers = {\n            headers: {\n                'x-api-key': apiKey,\n            },\n        }\n        const requestBody = {\n            operation_type: 'NFT_MINT',\n            ercType: 'ERC721',\n            network_name: networkName,\n            collection_name: collectionName,\n            collection_address: collectionAddress,\n            quantity: quantity,\n            metadata: metadata,\n        };\n        const response = await axios.post(apiEndpoint, requestBody, headers);\n        if(response.status === 200){\n            const { data: { order_id } }  = response.data;\n            res.send('NFT Minted');\n        }\n    }\n    catch(error){\n        console.error('Error:', error.message);\n        res.status(500).send('Internal Server Error');\n    }\n})\nAnd thats it, you can now start using your own server to mint NFTs using your own frontend apps."}},"/guide/okto-widgets/customize-okto":{"title":"Customize Okto","data":{"":"Now, you might have noticed that the Okto Bottomsheet looks the same for any app, regardless of its design. What if we told you there was a way to theme the bottom sheet to fit your app's design?","undefined#Customizing the Bottom Sheet":"To customize the okto bottom sheet in your flutter app you can do the following:\nwhile calling the openBottomSheet method, just pass these arguments as needed:\nawait okto.openBottomSheet(\n    context: context,\n    textPrimaryColor: \"0xFFFFFFFF\",\n    textSecondaryColor: \"0xFFFFFFFF\",\n    textTertiaryColor: \"0xFFFFFFFF\",\n    accentColor: \"0x80433454\",\n    accent2Color: \"0x80905BF5\",\n    strokBorderColor: \"0xFFACACAB\",\n    strokDividerColor: \"0x4DA8A8A8\",\n    surfaceColor: \"0xFF1F0A2F\",\n    backgroundColor: \"0xFF000000\",\n    );\nAnd that's it! It's as simple as that. Now, when you pull up the bottom sheet, it will be themed according to your app's design."}},"/guide/okto-widgets/open-okto-bottomsheet":{"title":"Open Okto Bottomsheet","data":{"":"Okto Bottomsheet is opened first when a new user authenticates with Okto and gets prompted to create wallet.\nNow if you want the user to access this bottom sheet again, Okto provides showWidgetSheet method to open the bottom sheet again.","add-button-to-open-bottom-sheet#Add Button to Open Bottom Sheet":"Let's add a button in user-profile.tsx to open the bottom sheet.\nimport { View, Button, Text } from 'react-native';\nimport { useOkto, type OktoContextType } from 'okto-sdk-react-native';\nimport React from 'react';\nconst UserProfileScreen = () => {\n  const { showWidgetSheet } = useOkto() as OktoContextType;\n  return (\n    <View>\n      <Text>User Profile</Text>\n      ...\n      <Button\n        title=\"Open Okto Profile\"\n        onPress={() => {\n          showWidgetSheet();\n        }}\n      />\n    </View>\n  );\n};\nexport default UserProfileScreen;\nOkto Bottomsheet is opened first when a new user authenticates with Okto and gets prompted to create wallet.\nNow if you want the user to access this bottom sheet again, Okto provides showWidgetSheet method to open the bottom sheet again.","add-button-to-open-bottom-sheet-1#Add Button to Open Bottom Sheet":"Let's add a button in user_profile.dart to open the bottom sheet.\nimport 'package:flutter/material.dart';\nimport 'package:okto_sdk_flutter/okto_sdk_flutter.dart';\nclass UserProfileScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('User Profile'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text('User Profile'),\n            ElevatedButton(\n              onPressed: () async {\n                await okto.openBottomSheet(context: context); // you can customize the bottom sheet by passing parameters.\n              },\n              child: Text('Open Okto Profile'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}"}},"/guide/raw-transactions/execute":{"title":"Execute","data":{"":"If we want to execute a raw transaction directly on chain, Okto provides a way to use one of the API's to send a transaction to the blockchain and execute it for the user.","send-a-transaction#Send a transaction":"Create a new screen and name it send-raw-transaction:","undefined#React Native":"For example purposes we will execute a Polygon transaction.\nimport { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nimport { useState } from 'react';\nconst SendRawTransactionScreen = () => {\n    const { executeRawTransaction } = useOkto() as OktoContextType;\n    const [network, setNetwork] = useState<string>(\"POLYGON_TESTNET\");\n    const [from, setFrom] = useState<string>(\"0x0342A54DD44E8744FD185579Af57845Cb0ac6cB0\");\n    const [to, setTo] = useState<string>(\"0x80322ea18633A1f713e987d65Ae78AcCDAB6e55e\");\n    const [data, setData] = useState<string>(\"0x\");\n    const [value, setValue] = useState<string>(\"0x100000\");\n    const sendTransaction = async () => {\n        const requestData = {\n            network_name: network,\n            transaction: {\n                from,\n                to,\n                data,\n                value,\n            },\n        }\n        executeRawTransaction(requestData)\n                .then((result) => {\n                    console.log(result.jobId)\n                })\n                .catch((error) => {\n                    console.error(`error:`, error);\n                });\n    }\n}\nFor example purposes we will execute a Solana transaction.\nimport { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nimport { useState } from 'react';\nconst SendRawTransactionScreen = () => {\n    const { executeRawTransaction } = useOkto() as OktoContextType;\n    const [network, setNetwork] = useState<string>(\"SOLANA_DEVNET\");\n    const [instructions, setInstructions] = useState<any[]>([\n        {\n            \"keys\": [\n                {\n                    \"pubkey\": \"GQkXkHF8LTwyZiZUcBWwYJeJBFEqR4vRCV4J5Xe7zGiQ\",\n                    \"isSigner\": true,\n                    \"isWritable\": true\n                },\n                {\n                    \"pubkey\": \"GEjBy2puN8a53darpz7CTbRvSb6wepzhK7s8C3Dww4yg\",\n                    \"isSigner\": false,\n                    \"isWritable\": true\n                }\n            ],\n            \"programId\": \"11111111111111111111111111111111\",\n            \"data\": [\n                2,\n                0,\n                0,\n                0,\n                128,\n                150,\n                152,\n                0,\n                0,\n                0,\n                0,\n                0\n            ]\n        }\n    ]);\n    const [signers, setSigners] = useState<string[]>([\"GQkXkHF8LTwyZiZUcBWwYJeJBFEqR4vRCV4J5Xe7zGiQ\"]);\n    const sendTransaction = async () => {\n        const requestData = {\n            network_name: network,\n            transaction: {\n                instructions,\n                signers,\n            },\n        }\n        executeRawTransaction(requestData)\n                .then((result) => {\n                    console.log(result.jobId)\n                })\n                .catch((error) => {\n                    console.error(`error:`, error);\n                });\n    }\n}\nFor example purposes we will execute an Aptos transaction.\nimport { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nimport { useState } from 'react';\nconst SendRawTransactionScreen = () => {\n    const { executeRawTransaction } = useOkto() as OktoContextType;\n    const [network, setNetwork] = useState<string>(\"APTOS_TESTNET\");\n    const [func, setFunction] = useState<string>(\"0x1::aptos_account::transfer\");\n    const [typeArguments, setTypeArguments] = useState<any[]>([]);\n    const [functionArguments, setFunctionArguments] = useState<any[]>([\n            \"\",\n            \"1000000\"\n        ]);\n    const sendTransaction = async () => {\n        const requestData = {\n            network_name: network,\n            transaction: {\n                function: func,\n                typeArguments,\n                functionArguments\n            },\n        }\n        executeRawTransaction(requestData)\n                .then((result) => {\n                    console.log(result.jobId)\n                })\n                .catch((error) => {\n                    console.error(`error:`, error);\n                });\n    }\n}","undefined#Add Form Fields":"Add the form fields to the send-raw-transaction.tsx screen.\nimport { View, TextInput, Button, Text } from \"react-native\";\nimport React, { useState } from 'react';\nconst SendRawTransactionScreen = () => {\n    const [network, setNetwork] = useState<string>(\"POLYGON_TESTNET\");\n    const [from, setFrom] = useState<string>(\"0x0342A54DD44E8744FD185579Af57845Cb0ac6cB0\");\n    const [to, setTo] = useState<string>(\"0x80322ea18633A1f713e987d65Ae78AcCDAB6e55e\");\n    const [data, setData] = useState<string>(\"0x\");\n    const [value, setValue] = useState<string>(\"0x100000\");\n    \n    const sendTransaction = async () => {\n        // Add the sendTransaction logic here\n    };\n    return (\n        <View>\n            <Text>Execute Raw Polygon Transaction</Text>\n            <TextInput\n                placeholder=\"From\"\n                value={from}\n                onChangeText={setFrom}\n            />\n            <TextInput\n                placeholder=\"To\"\n                value={to}\n                onChangeText={setTo}\n            />\n            <TextInput\n                placeholder=\"Data\"\n                value={data}\n                onChangeText={setData}\n            />\n            <TextInput\n                placeholder=\"Value\"\n                value={value}\n                onChangeText={setValue}\n            />\n            <Button title=\"Send Transaction\" onPress={sendTransaction} />\n        </View>\n    )\n}\nimport { View, TextInput, Button, Text } from \"react-native\";\nimport React, { useState } from 'react';\nconst SendRawTransactionScreen = () => {\n    const [network, setNetwork] = useState<string>(\"SOLANA_DEVNET\");\n    const [instructions, setInstructions] = useState<any[]>([\n        {\n            \"keys\": [\n                {\n                    \"pubkey\": \"GQkXkHF8LTwyZiZUcBWwYJeJBFEqR4vRCV4J5Xe7zGiQ\",\n                    \"isSigner\": true,\n                    \"isWritable\": true\n                },\n                {\n                    \"pubkey\": \"GEjBy2puN8a53darpz7CTbRvSb6wepzhK7s8C3Dww4yg\",\n                    \"isSigner\": false,\n                    \"isWritable\": true\n                }\n            ],\n            \"programId\": \"11111111111111111111111111111111\",\n            \"data\": [\n                2,\n                0,\n                0,\n                0,\n                128,\n                150,\n                152,\n                0,\n                0,\n                0,\n                0,\n                0\n            ]\n        }\n    ]);\n    const [signers, setSigners] = useState<string[]>([\"GQkXkHF8LTwyZiZUcBWwYJeJBFEqR4vRCV4J5Xe7zGiQ\"]);\n    \n    const sendTransaction = async () => {\n        // Add the sendTransaction logic here\n    };\n    return (\n        <View>\n            <Text>Execute Raw Solana Transaction</Text>\n            <TextInput\n                placeholder=\"Instructions\"\n                value={instructions}\n                onChangeText={setInstructions}\n            />\n            <TextInput\n                placeholder=\"Signers\"\n                value={signers}\n                onChangeText={setSigners}\n            />\n            <Button title=\"Send Transaction\" onPress={sendTransaction} />\n        </View>\n    )\n}\nimport { View, TextInput, Button, Text } from \"react-native\";\nimport React, { useState } from 'react';\nconst SendRawTransactionScreen = () => {\n    const [network, setNetwork] = useState<string>(\"APTOS_TESTNET\");\n    const [func, setFunction] = useState<string>(\"0x1::aptos_account::transfer\");\n    const [typeArguments, setTypeArguments] = useState<any[]>([]);\n    const [functionArguments, setFunctionArguments] = useState<any[]>([\n            \"\",\n            \"1000000\"\n        ]);\n    \n    const sendTransaction = async () => {\n        // Add the sendTransaction logic here\n    };\n    return (\n        <View>\n            <Text>Execute Raw Aptos Transaction</Text>\n            <TextInput\n                placeholder=\"Function\"\n                value={func}\n                onChangeText={setFunction}\n            />\n            <TextInput\n                placeholder=\"Type Arguments\"\n                value={typeArguments}\n                onChangeText={setTypeArguments}\n            />\n            <TextInput\n                placeholder=\"Function Arguments\"\n                value={functionArguments}\n                onChangeText={setFunctionArguments}\n            />\n            <Button title=\"Send Transaction\" onPress={sendTransaction} />\n        </View>\n    )\n}","undefined#Flutter":"For example purposes we will execute a Polygon transaction.\nimport 'package:flutter/material.dart';\nimport 'package:okto_sdk_flutter/okto_sdk_flutter.dart';\nclass SendRawTransactionScreen extends StatelessWidget {\n  final Okto okto = Okto('your_client_api_key');\n  @override\n  Widget build(BuildContext context) {\n    final TextEditingController fromController = TextEditingController(text: \"0x0342A54DD44E8744FD185579Af57845Cb0ac6cB0\");\n    final TextEditingController toController = TextEditingController(text: \"0x80322ea18633A1f713e987d65Ae78AcCDAB6e55e\");\n    final TextEditingController dataController = TextEditingController(text: \"0x\");\n    final TextEditingController valueController = TextEditingController(text: \"0x100000\");\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Send Raw Transaction'),\n      ),\n      body: Padding(\n        padding: EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            TextField(\n              controller: fromController,\n              decoration: InputDecoration(labelText: 'From'),\n            ),\n            TextField(\n              controller: toController,\n              decoration: InputDecoration(labelText: 'To'),\n            ),\n            TextField(\n              controller: dataController,\n              decoration: InputDecoration(labelText: 'Data'),\n            ),\n            TextField(\n              controller: valueController,\n              decoration: InputDecoration(labelText: 'Value'),\n            ),\n            SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: () async {\n                final transactionObject = {\n                  'transaction': {\n                    'from': fromController.text,\n                    'to': toController.text,\n                    'data': dataController.text,\n                    'value': valueController.text,\n                  },\n                };\n                try {\n                  final result = await okto.executeRawTransaction(networkName: 'POLYGON_TESTNET', transaction: transactionObject);\n                  print(result.jobId);\n                } catch (error) {\n                  print('error: $error');\n                }\n              },\n              child: Text('Send Transaction'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\nFor example purposes we will execute a Solana transaction.\nimport 'package:flutter/material.dart';\nimport 'package:okto_sdk_flutter/okto_sdk_flutter.dart';\nclass SendRawTransactionScreen extends StatelessWidget {\n  final Okto okto = Okto('your_client_api_key');\n  @override\n  Widget build(BuildContext context) {\n    final TextEditingController instructionsController = TextEditingController(text: '''\n    [\n      {\n        \"keys\": [\n          {\n            \"pubkey\": \"GQkXkHF8LTwyZiZUcBWwYJeJBFEqR4vRCV4J5Xe7zGiQ\",\n            \"isSigner\": true,\n            \"isWritable\": true\n          },\n          {\n            \"pubkey\": \"GEjBy2puN8a53darpz7CTbRvSb6wepzhK7s8C3Dww4yg\",\n            \"isSigner\": false,\n            \"isWritable\": true\n          }\n        ],\n        \"programId\": \"11111111111111111111111111111111\",\n        \"data\": [\n          2,\n          0,\n          0,\n          0,\n          128,\n          150,\n          152,\n          0,\n          0,\n          0,\n          0,\n          0\n        ]\n      }\n    ]\n    ''');\n    final TextEditingController signersController = TextEditingController(text: '[\"GQkXkHF8LTwyZiZUcBWwYJeJBFEqR4vRCV4J5Xe7zGiQ\"]');\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Send Raw Transaction'),\n      ),\n      body: Padding(\n        padding: EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            TextField(\n              controller: instructionsController,\n              decoration: InputDecoration(labelText: 'Instructions'),\n            ),\n            TextField(\n              controller: signersController,\n              decoration: InputDecoration(labelText: 'Signers'),\n            ),\n            SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: () async {\n                final transactionObject = {\n                  'transaction': {\n                    'instructions': instructionsController.text,\n                    'signers': signersController.text,\n                  },\n                };\n                try {\n                  final result = await okto.executeRawTransaction(networkName: 'SOLANA_DEVNET',transaction: transactionObject);\n                  print(result.jobId);\n                } catch (error) {\n                  print('error: $error');\n                }\n              },\n              child: Text('Send Transaction'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\nFor example purposes we will execute an Aptos transaction.\nimport 'package:flutter/material.dart';\nimport 'package:okto_sdk_flutter/okto_sdk_flutter.dart';\nclass SendRawTransactionScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final TextEditingController functionController = TextEditingController(text: \"0x1::aptos_account::transfer\");\n    final TextEditingController typeArgumentsController = TextEditingController();\n    final TextEditingController functionArgumentsController = TextEditingController(text: '''\n    [\n      \"\",\n      \"1000000\"\n    ]\n    ''');\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Send Raw Transaction'),\n      ),\n      body: Padding(\n        padding: EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            TextField(\n              controller: functionController,\n              decoration: InputDecoration(labelText: 'Function'),\n            ),\n            TextField(\n              controller: typeArgumentsController,\n              decoration: InputDecoration(labelText: 'Type Arguments'),\n            ),\n            TextField(\n              controller: functionArgumentsController,\n              decoration: InputDecoration(labelText: 'Function Arguments'),\n            ),\n            SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: () async {\n                final transactionObject = {\n                  'transaction': {\n                    'function': functionController.text,\n                    'typeArguments': typeArgumentsController.text,\n                    'functionArguments': functionArgumentsController.text,\n                  },\n                };\n                try {\n                  final result = await okto.rawTransactionExecute(networkName: 'APTOS_TESTNET',transaction: transactionObject);\n                  print(result.jobId);\n                } catch (error) {\n                  print('error: $error');\n                }\n              },\n              child: Text('Send Transaction'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\nWith that you have successfully set up a way for users to execute a raw transaction to the blockchain. You can customize the transaction object depending on the network you want to send the transaction to."}},"/guide/transfer-assets/nft-order-details":{"title":"Nft Order Details","data":{"":"Once the NFT transfer is initiated, the API will return a order_id, which can be used to track the status of the transfer along with other order details.","fetch-order-details#Fetch Order Details":"We will be using the getNftOrderDetails method to fetch all the NFT order details for the user. Then we can use the order_id to check our current order details.We will create a new screen named nft-order-details.tsx and fetch all the orders and filter the order details using the order_id.And similar to the transfer-tokens.tsx screen, we will register the screen in the navigation.tsx file with orderId as parameter\nexport type RootStackParamList = {\n    \n    ...\n    NftOrderDetails: { \n        order_id: string \n    };\n}\nexport default function Navigation(){\n    return (\n        <Stack.Navigator initialRouteName=\"Login\">\n            \n            ...\n            <Stack.Screen name=\"NftOrderDetails\" component={NftOrderDetailsScreen} />\n        </Stack.Navigator>\n    )\n}\nNow we can accept the order_id as a parameter in the nft-order-details.tsx screen.\nimport React, { useState } from 'react';\nimport { RootStackParamList } from \"../navigtion\";\nimport { useOkto, type OktoContextType, type NftOrderDetails} from 'okto-sdk-react-native';\nconst NftOrderDetailsScreen = ({ route }: { route: RouteProp<RootStackParamList, \"NftOrderDetails\"> }) => {\n    const { getNftOrderDetails } = useOkto() as OktoContextType;\n    const { orderId } = route.params;\n    const [order, setOrder] = React.useState<NftOrderDetails | null>(null);\n    React.useEffect(() => {\n        getNftOrderDetails({order_id: orderId})\n          .then((orders) => {\n            const order = orders.find((order: any) => order.order_id === orderId);\n            if(order) setOrder(order);\n          })\n          .catch((error) => {\n            console.error(`error:`, error);\n          });\n    }, [])\n}","display-order-details#Display Order Details":"We will now display the order details on the screen. We will use the order state to display the details.\nimport { RootStackParamList } from \"../navigtion\";\nimport { View, TextInput, Button } from 'react-native';\nconst NftOrderDetailsScreen = ({ route }: { route: RouteProp<RootStackParamList, \"OrderDetails\"> }) => {\n    \n    ...\n    return (\n        <View style={{ flex: 1, backgroundColor: '#fff' }}>\n            <Text>NFT Order Details</Text>\n            {order && <View>\n                <Text>Order ID: {order.id}</Text>\n                <Text>Order NFT Name: {order.nft_name}</Text>\n                <Text>Order Type: {order.type}</Text>\n                <Text>Order Network Name: {order.network_name}</Text>\n                <Text>Order Collection Address: {order.collection_address}</Text>\n            </View>}\n        </View>\n    )\n}","add-navigation#Add Navigation":"Now, let's add a automatic navigation from transfer-nft.tsx to take the user to nft-order-details.tsx for checking the order details.\nconst TransferNFTScreen = ({ navigation }: { navigation: any }) => {\n    \n    const handleSubmit = () => {\n        transferNft(\n            {\n                operation_type: operationType,\n                network_name: networkName,\n                collection_address: collection_address,\n                collection_name: collection_name,\n                quantity: quantity,\n                recipient_address: recipientAddress,\n                nft_address: nftAddress\n            }).then((result) => {\n                navigation.navigate('NftOrderDetails', { order_id: result.order_id })\n            })\n        );\n    }\n    \n    return (\n        ...\n    )\n}","fetch-order-details-1#Fetch Order Details":"We will be using the getNftOrderDetails method to fetch all the NFT order details for the user. Then we can use the order_id to check our current order details.We will create a new screen named nft_order_details.dart and fetch all the orders and filter the order details using the orderId.\nimport 'package:flutter/material.dart';\nimport 'package:okto_test/okto.dart';\nclass NftOrderDetailsScreen extends StatefulWidget {\nconst NftOrderDetailsScreen({super.key});\n@override\nState<NftOrderDetailsScreen> createState() => _NftOrderDetailsScreenState();\n}\nclass _NftOrderDetailsScreenState extends State<NftOrderDetailsScreen> {\n@override\nWidget build(BuildContext context) {\nreturn Scaffold(\n  body: Center(\n    child: TextButton(\n      onPressed: () async {\n        try {\n         final orderDetails =  await okto.orderDetailsNft();\n         // pass optional parameters like \n            // orderId\n            // orderState\n            // page\n            // size\n         // do something\n        } catch (e) {\n          print(e);\n        }\n      },\n      child: const Text('Get nft order details'),\n    ),\n  ),\n);\n}\n}"}},"/guide/raw-transactions/status":{"title":"Status","data":{"":"Now that the transaction is executed, we get a jobId after the API is successful. We can use the jobId to track the status of the transaction.","fetch-transaction-details#Fetch Transaction Details":"We will get the transaction details using the raw-transaction-status API. This API will return the status of the transaction and other transaction details.\nCreate a new screen with the name raw-transaction-status and we will fetch the details here.\nSetup navigation to accept the jobId as a parameter. You can follow the same steps as we did for Order Details.\nimport { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nconst FetchRawTransactionScreen = ({ route }: { route: RouteProp<RootStackParamList, \"FetchRawTransaction\"> }) => {\n    const { getRawTransactionStatus } = useOkto() as OktoContextType;\n    const { jobId } = route.params;\n    const [transactionDetails, setTransactionDetails] = useState<Job[]>([]);\n    useEffect(() => {\n        getRawTransactionStatus({order_id: jobId})\n            .then((result) => {\n                const job = orders.find((order: any) => order.order_id === jobId);\n                if(job) setTransactionDetails(job);\n            })\n            .catch((error) => {\n                console.error(`error:`, error);\n            });\n    }, []);\n}\nimport 'package:flutter/material.dart';\nimport 'package:okto_sdk/okto_sdk.dart';\nclass FetchRawTransactionScreen extends StatelessWidget {\n  final String jobId;\n  const FetchRawTransactionScreen({Key? key, required this.jobId}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(\"Transaction Details\")),\n      body: FutureBuilder(\n        future: OktoSdk.rawTransactionStatus(orderId: jobId),\n        builder: (context, snapshot) {\n          if (snapshot.connectionState == ConnectionState.waiting) {\n            return Center(child: CircularProgressIndicator());\n          } else if (snapshot.hasError) {\n            return Center(child: Text(\"Error: ${snapshot.error}\"));\n          } else if (!snapshot.hasData) {\n            return Center(child: Text(\"No data\"));\n          } else {\n            final transactionDetails = snapshot.data;\n            return Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Text(\"Network: ${transactionDetails.data.jobs[0].networkName}\"), // change this 0 to some `index` inside some iterable class.\n                Text(\"Status: ${transactionDetails.data.jobs[0].status}\"),\n                Text(\"Transaction Hash: ${transactionDetails.data.jobs[0].transactionHash}\"),\n              ],\n            );\n          }\n        },\n      ),\n    );\n  }\n}","display-transaction-details#Display Transaction Details":"We will display the transaction details on the screen.\nimport { View, Text } from \"react-native\";\nconst FetchRawTransactionScreen = () => {\n    ...\n    return (\n        <View>\n            <Text>Raw Polygon Transaction Status</Text>\n            {transactionDetails.map((transaction, index) => (\n                <View key={index}>\n                    <Text>Network: {transaction.order_id}</Text>\n                    <Text>Status: {transaction.status}</Text>\n                    <Text>Transaction Hash: {transaction.transaction_hash}</Text>\n                </View>\n            ))}\n        </View>\n    );\n}","add-to-navigation#Add to Navigation":"Add the navigation to the send-raw-transaction screen on the success function to navigate to the raw-transaction-status screen.\nconst SendRawTransactionScreen = ({ navigation }: { navigation: any }) => {\n    const sendTransaction = async () => {\n        ...\n        executeRawTransaction(requestData)\n            .then((result) => {\n                console.log(result.jobId);\n                navigation.navigate(\"FetchRawTransaction\", { jobId: result.jobId });\n            })\n            .catch((error) => {\n                console.error(`error:`, error);\n            });\n    };\n    ...\n}"}},"/guide/transfer-assets/order-details":{"title":"Order Details","data":{"":"Once the token transfer is initiated, the API will return a order_id, which can be used to track the status of the transfer along with other order details.","fetch-order-details#Fetch Order Details":"We will be using the orderHistory method to fetch all the order details for the user. Then we can use the order_id to check our current order details.We will create a new screen named order-details.tsx and fetch all the orders and filter the order details using the order_id.But before that we need to register the screen in the navigation.tsx file with orderId as parameter\nexport type RootStackParamList = {\n    \n    ...\n    OrderDetails: { \n        order_id: string \n    };\n}\nexport default function Navigation(){\n    return (\n        <Stack.Navigator initialRouteName=\"Login\">\n            \n            ...\n            <Stack.Screen name=\"OrderDetails\" component={OrderDetailsScreen} />\n        </Stack.Navigator>\n    )\n}\nNow we can accept the order_id as a parameter in the order-details.tsx screen.\nimport React, { useState } from 'react';\nimport { RootStackParamList } from \"../navigtion\";\nimport { useOkto, type OktoContextType, type Order} from 'okto-sdk-react-native';\nconst OrderDetailsScreen = ({ route }: { route: RouteProp<RootStackParamList, \"OrderDetails\"> }) => {\n    const { orderHistory } = useOkto() as OktoContextType;\n    const { orderId } = route.params;\n    const [order, setOrder] = React.useState<Order | null>(null);\n    React.useEffect(() => {\n        orderHistory({order_id: orderId})\n          .then((orders) => {\n            const order = orders.find((order: any) => order.order_id === orderId);\n            if(order) setOrder(order);\n          })\n          .catch((error) => {\n            console.error(`error:`, error);\n          });\n    }, [])\n}","display-order-details#Display Order Details":"We will now display the order details on the screen. We will use the order state to display the details.\nimport { RootStackParamList } from \"../navigtion\";\nimport { View, TextInput, Button } from 'react-native';\nconst OrderDetailsScreen = ({ route }: { route: RouteProp<RootStackParamList, \"OrderDetails\"> }) => {\n    \n    ...\n    return (\n        <View style={{ flex: 1, backgroundColor: '#fff' }}>\n            <Text>Order Details</Text>\n            {order && <View>\n                <Text>Order ID: {order.order_id}</Text>\n                <Text>Order Type: {order.order_type}</Text>\n                <Text>Order Status: {order.status}</Text>\n                <Text>Order Transaction Hash: {order.transaction_hash}</Text>\n                <Text>Order Network Name: {order.network_name}</Text>\n            </View>}\n        </View>\n    )\n}","add-navigation#Add Navigation":"Now, let's add a automatic navigation from transfer-tokens.tsx to take the user to order-details.tsx for checking the order details.\nconst TransferTokensScreen = ({ navigation }: { navigation: any }) => {\n    \n    const handleSubmit = () => {\n        transferTokens(\n            networkName,\n            tokenAddress,\n            recipientAddress,\n            quantity\n        ).then((result) => {\n                navigation.navigate('OrderDetails', { order_id: result.order_id })\n        })\n        .catch((error) => {\n            console.log('Transfer error', error);\n        });\n    }\n    \n    return (\n        ...\n    )\n}\nOnce the token transfer is initiated, the API will return a order_id, which can be used to track the status of the transfer along with other order details.","fetch-order-details-1#Fetch Order Details":"We will be using the orderHistory method to fetch all the order details for the user. Then we can use the orderId to check our current order details.\nFor Flutter we can directly begin with creating a new screen inside lib/screens/ order_details.dart\nimport 'package:flutter/material.dart';\nimport 'package:okto_test/okto.dart';\nclass OrderDetailsScreen extends StatefulWidget {\n  const OrderDetailsScreen({super.key});\n  @override\n  State<OrderDetailsScreen> createState() => _OrderDetailsScreenState();\n}\nclass _OrderDetailsScreenState extends State<OrderDetailsScreen> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n            onPressed: () async {\n              final orderHistory = await okto.orderHistory();\n              // do something..\n            },\n            child: const Text('Fetch Order Details')),\n      ),\n    );\n  }\n}","display-order-details-1#Display Order Details":"import 'package:flutter/material.dart';\nimport 'package:okto_test/models/client/order_history_model.dart';\nimport 'package:okto_test/okto.dart';\nclass OrderDetailsScreen extends StatefulWidget {\nconst OrderDetailsScreen({super.key});\n@override\nState<OrderDetailsScreen> createState() => _OrderDetailsScreenState();\n}\nclass _OrderDetailsScreenState extends State<OrderDetailsScreen> {\n@override\nWidget build(BuildContext context) {\n return Scaffold(\n   body: Center(\n     child: TextButton(\n       onPressed: () async {\n         final orderHistory = await okto.orderHistory();\n         Navigator.push(\n           context,\n           MaterialPageRoute(\n             builder: (context) => OrderDetailsShowScreen(orderHistory: orderHistory),\n           ),\n         );\n       },\n       child: const Text('Fetch Order Details'),\n     ),\n   ),\n );\n}\n}\nclass OrderDetailsShowScreen extends StatefulWidget {\nfinal OrderHistoryResponse orderHistory;\nconst OrderDetailsShowScreen({super.key, required this.orderHistory});\n@override\nState<OrderDetailsShowScreen> createState() => _OrderDetailsShowScreenState();\n}\nclass _OrderDetailsShowScreenState extends State<OrderDetailsShowScreen> {\n@override\nWidget build(BuildContext context) {\n final orderHistory = widget.orderHistory.data.jobs;\n return Scaffold(\n   appBar: AppBar(\n     title: const Text('Order Details'),\n   ),\n   body: ListView.builder(\n     itemCount: orderHistory.length,\n     itemBuilder: (context, index) {\n       return ListTile(\n         title: Text(orderHistory[index].orderId),\n       );\n     },\n   ),\n );\n}\n}"}},"/guide/transfer-assets/transfer-nft":{"title":"Transfer Nft","data":{"":"After being able to transfer tokens and track the orders, we will add a Functionality to transfer NFTs from one account to another.","adding-required-fields#Adding required fields":"We will be using the transferNFT method to transfer NFTs from one account to another. This method requires the following fields:\noperationType: The type of operation to be performed. In this case, it will be NFT_TRANSFER.\nquantity: The quantity of NFTs to be transferred.\nrecipientAddress: The address of the recipient account.\nnetworkName: The name of the network to perform the transfer on.\nnftAddress: The address of the NFT to be transferred.\ncollectionAddress: The address of the collection containing the NFT.\ncollectionName: The name of the collection containing the NFT.\nWe will create a new screen named transfer-nft.tsx and start by creating states and a method to handle the submission of the form fields.\nimport React, { useState } from 'react';\nimport { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nconst TransferNFTScreen = () => {\n    const { transferNft } = useOkto() as OktoContextType;\n    const operationType = \"NFT_TRANSFER\"\n    const [networkName, setNetworkName] = useState<string>(\"APTOS_TESTNET\")\n    const [collectionAddress, setCollectionAddress] = useState<string>(\"\")\n    const [collectionName, setCollectionName] = useState<string>(\"super avengers\")\n    const [quantity, setQuantity] = useState<string>(\"1\")\n    const [recipientAddress, setRecipientAddress] = useState<string>(\"\")\n    const [nftAddress, setNftAddress] = useState<string>(\"\")\n    const handleSubmit = () => {\n        transferNft(\n            {\n                operation_type: operationType,\n                network_name: networkName,\n                collection_address: collection_address,\n                collection_name: collection_name,\n                quantity: quantity,\n                recipient_address: recipientAddress,\n                nft_address: nftAddress\n            }).then((result) => {\n                console.log(result)\n            }).catch((error) => {\n                console.error(`error:`, error);\n            });\n       \n    }\n}","add-form#Add Form":"We will add form fields to the screen to capture the required fields. Additionally, we will include a button to submit the form.\nimport { View, TextInput, Button } from 'react-native';\nconst TransferNFTScreen = () => {\n    \n    ...\n    return (\n        <View style={{ flex: 1, backgroundColor: '#fff' }}>\n            <Text>Transfer NFT</Text>\n            <TextInput\n                value={networkName}\n                onChangeText={(value) => setNetworkName(value)}\n                placeholder=\"Enter Network Name\"\n            />\n            <TextInput\n                value={collectionAddress}\n                onChangeText={(value) => setCollectionAddress(value)}\n                placeholder=\"Enter Collection Address\"\n            />\n            <TextInput\n                value={collectionName}\n                onChangeText={(value) => setCollectionName(value)}\n                placeholder=\"Enter Collection Name\"\n            />\n            <TextInput\n                value={quantity}\n                onChangeText={(value) => setQuantity(value)}\n                placeholder=\"Enter Quantity\"\n            />\n            <TextInput\n                value={recipientAddress}\n                onChangeText={(value) => setRecipientAddress(value)}\n                placeholder=\"Enter Recipient Address\"\n            />\n            <TextInput\n                value={nftAddress}\n                onChangeText={(value) => setNftAddress(value)}\n                placeholder=\"Enter NFT Address\"\n            />\n            <Button\n                title=\"Transfer NFT\"\n                onPress={handleSubmit}\n            />\n        </View>\n    )\n}","add-navigation#Add Navigation":"Now, let's add a way for the user to navigate to this screen by including a button in the user-profile.tsx to navigate to the transfer-tokens.tsx.\nimport { Button, View } from 'react-native';\nconst UserProfileScreen = ({ navigation }: { navigation: any }) => {\n    \n    ...\n    \n    return (\n        <View>\n            ...\n            <View style={{ alignItems: \"center\" }}>\n                <Button\n                    title=\"Transfer Tokens\"\n                    onPress={() => navigation.navigate('TransferTokens')}\n                />\n            </View>\n        </View>\n    )\n}","adding-required-fields-1#Adding required fields":"We will be using the transferNFT method to transfer NFTs from one account to another. This method requires the following fields:\noperationType: The type of operation to be performed. In this case, it will be NFT_TRANSFER.\nquantity: The quantity of NFTs to be transferred.\nrecipientAddress: The address of the recipient account.\nnetworkName: The name of the network to perform the transfer on.\nnftAddress: The address of the NFT to be transferred.\ncollectionAddress: The address of the collection containing the NFT.\ncollectionName: The name of the collection containing the NFT.\nCreate a new dart file inside lib/screens folder named as transfer_nft.dart\nimport 'package:flutter/material.dart';\nimport 'package:okto_test/okto.dart';\nclass TransferNftScreen extends StatefulWidget {\n const TransferNftScreen({super.key});\n @override\n State<TransferNftScreen> createState() => _TransferNftScreenState();\n}\nclass _TransferNftScreenState extends State<TransferNftScreen> {\n @override\n Widget build(BuildContext context) {\n   const operationType = 'NFT_TRANSFER';\n   const networkName = 'APTOS_TESTNET';\n   const collectionAddress = '';\n   const collectionName = 'super avengers';\n   const quantity = \"1\";\n   const recipientAddress = '';\n   const nftAddress = '';\n   return Scaffold(\n     body: Center(\n       child: TextButton(\n         onPressed: () async {\n           try {\n             await okto.transferNft(\n               operationType: operationType,\n               networkName: networkName,\n               collectionAddress: collectionAddress,\n               collectionName: collectionName,\n               quantity: quantity,\n               recipientAddress: recipientAddress,\n               nftAddress: nftAddress,\n             );\n           } catch (e) {\n             print(e);\n           }\n         },\n         child: const Text('Transfer NFT'),\n       ),\n     ),\n   );\n }\n}"}},"/guide/transfer-assets/transfer-tokens":{"title":"Transfer Tokens","data":{"":"The user can now start transferring tokens from one account to another. We can dive straight into the implementation of the transfer tokens feature.","adding-required-fields#Adding required fields":"We will be using the transferTokens method to transfer tokens from one account to another. This method requires the following fields:\nnetwork - The network to use for the transfer.\ntokenAddress - The address of the token to transfer.\namount - The amount of tokens to transfer.\nrecipient - The address of the recipient.\nWe will create a new screen named transfer-tokens.tsx and start by creating states and a method to handle the submission of the form fields.\nimport React, { useState } from 'react';\nimport { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nconst TransferTokensScreen = () => {\n    const { transferTokens } = useOkto() as OktoContextType;\n    const [networkName, setNetworkName] = useState(\"APTOS_TESTNET\");\n    const [tokenAddress, setTokenAddress] = useState(\"0x1::aptos_coin::AptosCoin\");\n    const [quantity, setQuantity] = useState(\"1\");\n    const [recipientAddress, setRecipientAddress] = useState(\"\");\n    const handleSubmit = () => {\n        transferTokens({\n            network_name: networkName,\n            token_address: tokenAddress,\n            recipient_address: recipientAddress,\n            quantity: quantity\n        }).then((result) => {\n                console.log('Transfer success', result);\n        })\n        .catch((error) => {\n            console.log('Transfer error', error);\n        });\n    }\n}","add-form#Add Form":"We will add form fields to the screen to capture the required fields. Additionally, we will include a button to submit the form.\nimport { View, TextInput, Button } from 'react-native';\nconst TransferTokensScreen = () => {\n    \n    ...\n    return (\n        <View style={{ flex: 1, backgroundColor: '#fff' }}>\n            <Text>Transfer Tokens</Text>\n            <TextInput\n                value={networkName}\n                onChangeText={(value) => setNetworkName(value)}\n                placeholder=\"Enter Network Name\"\n            />\n            <TextInput\n                value={tokenAddress}\n                onChangeText={(value) => setTokenAddress(value)}\n                placeholder=\"Enter Token Address\"\n            />\n            <TextInput\n                value={quantity}\n                onChangeText={(value) => setQuantity(value)}\n                placeholder=\"Enter Quantity\"\n            />\n            <TextInput\n                value={recipientAddress}\n                onChangeText={(value) => setRecipientAddress(value)}\n                placeholder=\"Enter Recipient Address\"\n            />\n            <Button\n                title=\"Transfer Tokens\"\n                onPress={handleSubmit}\n            />\n        </View>\n    )\n}","add-navigation#Add Navigation":"Now, let's add a way for the user to navigate to this screen by including a button in the user-profile.tsx to navigate to the transfer-tokens.tsx.\nimport { Button, View } from 'react-native';\nconst UserProfileScreen = ({ navigation }: { navigation: any }) => {\n    \n    ...\n    \n    return (\n        <View>\n            ...\n            <View style={{ alignItems: \"center\" }}>\n                <Button\n                    title=\"Transfer Tokens\"\n                    onPress={() => navigation.navigate('TransferTokens')}\n                />\n            </View>\n        </View>\n    )\n}","adding-required-fields-1#Adding required fields":"We will be using the transferTokens method to transfer tokens from one account to another. This method requires the following fields:\nnetworkName - The network to use for the transfer.\ntokenAddress - The address of the token to transfer.\namount - The amount of tokens to transfer.\nrecipient - The address of the recipient.\nWe will create a new screen named transfer_tokens.dart and start by creating states and a method to handle the submission of the form fields\nimport 'package:flutter/material.dart';\nimport 'package:okto_test/okto.dart';\nclass TransferTokens extends StatefulWidget {\n  const TransferTokens({super.key});\n  @override\n  State<TransferTokens> createState() => _TransferTokensState();\n}\nclass _TransferTokensState extends State<TransferTokens> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n          onPressed: () async {\n            try {\n              await okto.transferTokens(\n                networkName: networkName,\n                tokenAddress: tokenAddress,\n                quantity: quantity,\n                recipientAddress: recipientAddress,\n              );\n            } catch (e) {\n              print(e);\n            }\n          },\n          child: const Text('Transfer Token'),\n        ),\n      ),\n    );\n  }\n}"}},"/oauth-steps":{"title":"Oauth Steps","data":{"":"To get a token_id you first need to visit OAuth 2.0 Playground.","select-google-oauth2-api-v2-for-scope#Select Google OAuth2 API v2 for Scope":"On the dashboard you will be on Step 1: Select & authorize APIs, from the menu select Google OAuth2 API v2 dropdown for Scope.","select-email-scope-and-authorize-apis#Select email scope and Authorize API's":"Select the https://www.googleapis.com/auth/userinfo.email scope and click on Authorize APIs button.","login-with-your-google-account#Login with your Google Account":"Select the google account for which you want to generate the token and click on Continue button.","exchange-authorization-code-for-tokens#Exchange authorization code for tokens":"You will be redirected to Step 2: Exchange authorization code for tokens page where you can click Exchange authorization code for tokens button.","copy-the-token#Copy the token":"Under the Request / Response tab, you will get the token_id. Copy the token and use it in the authenticate request."}},"/sdk-reference/flutter/authenticate":{"title":"authenticate Method","data":{"":"There are two ways to authenticate new users on your flutter app using Okto Flutter Sdk.\nAuthenticate user with idToken received from Google OAuth2.","undefined#Parameters":"jwtToken - Your JWT Token\nuserId   - Your User Id\n try {\n   final authResponse = await okto.authenticateWithUserId(jwtToken: 'YOUR_JWT_TOKEN', userId: 'YOUR_USER_ID');\n   print('success')\n } catch (e) {\n  print(e);\n }","undefined#Example":"import 'package:flutter/material.dart';\nimport 'package:okto_test/okto.dart';\nclass Login extends StatefulWidget {\nconst Login({super.key});\n@override\nState<Login> createState() => _LoginState();\n}\nclass _LoginState extends State<Login> {\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n      child: TextButton(\n        onPressed: () async {\n          try {\n            await okto.authenticateWithUserId(jwtToken: jwtToken, userId: userId);\n            // Navigate to homescreen\n          } catch (e) {\n            print(e);\n          }\n        },\n        child: Text('Authenticate'),\n      ),\n    ),\n  );\n}\n}"}},"/sdk-reference/flutter/getNftOrderDetails":{"title":"getNftOrderDetails Method","data":{"":"This method is used to get all the NFT order details of the current user.","parameters#Parameters":"order_id - Order id of the NFT.\npage-  Page number for pagination. Default is 1.\nsize - Number of records per page. Default is 10.\ninterface NftOrderDetailsQuery {\n  page: number;\n  size: number;\n  order_id: string;\n}\ngetNftOrderDetails(\n    query: Partial<NftOrderDetailsQuery>\n  ): Promise<NftOrderDetailsData>;","example#Example":"import { useOkto, type OktoContextType, type NftOrderDetails} from 'okto-sdk-react-native';\nconst { getNftOrderDetails } = useOkto() as OktoContextType;\ngetNftOrderDetails({order_id: orderId})\n.then((orders) => {\n  const order = orders.find((order: any) => order.order_id === orderId);\n  if(order) console.log(order)\n})\n.catch((error) => {\n  console.error(`error:`, error);\n});"}},"/sdk-reference/flutter/getPortfolio":{"title":"getPortfolio Method","data":{"":"This method is used to get all the token assets in the user's portfolio.","parameters#Parameters":"None","example#Example":"import 'package:flutter/material.dart';\nimport 'package:okto_flutter_sdk/okto_wallet_sdk.dart';\nimport 'package:okto_test/okto.dart';\nclass UserDetailsScreen extends StatefulWidget {\n  const UserDetailsScreen({super.key});\n  @override\n  State<UserDetailsScreen> createState() => _UserDetailsScreenState();\n}\nclass _UserDetailsScreenState extends State<UserDetailsScreen> {\n  UserPortfolioResponse? _portfolio;\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n            onPressed: () async {\n              final portfolio = await okto.userPortfolio();\n              setState(() {\n                _portfolio = portfolio;\n              });\n            },\n            child: const Text('Get user details')),\n      ),\n    );\n  }\n}"}},"/sdk-reference/flutter/getSupportedTokens":{"title":"getSupportedTokens Method","data":{"":"This method is used to get all whitelisted tokens on your API Key.","parameters#Parameters":"None","example#Example":"import 'package:flutter/material.dart';\nimport 'package:okto_flutter_sdk/okto_wallet_sdk.dart';\nimport 'package:okto_test/okto.dart';\nclass UserDetailsScreen extends StatefulWidget {\n  const UserDetailsScreen({super.key});\n  @override\n  State<UserDetailsScreen> createState() => _UserDetailsScreenState();\n}\nclass _UserDetailsScreenState extends State<UserDetailsScreen> {\n  TokenResponse? _tokens;\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n            onPressed: () async {\n              final tokens = await okto.supportedTokens();\n              setState(() {\n                _tokens = tokens;\n              });\n            },\n            child: const Text('Get supported tokens')),\n      ),\n    );\n  }\n}"}},"/sdk-reference/flutter/getSupportedNetworks":{"title":"getSupportedNetworks Method","data":{"":"This method is used to get all whitelisted networks on your API Key.","parameters#Parameters":"None","example#Example":"import 'package:flutter/material.dart';\nimport 'package:okto_flutter_sdk/okto_wallet_sdk.dart';\nimport 'package:okto_test/okto.dart';\nclass UserDetailsScreen extends StatefulWidget {\n  const UserDetailsScreen({super.key});\n  @override\n  State<UserDetailsScreen> createState() => _UserDetailsScreenState();\n}\nclass _UserDetailsScreenState extends State<UserDetailsScreen> {\n  NetworkDetails? _networks;\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n            onPressed: () async {\n              final networks = await okto.supportedNetworks();\n              setState(() {\n                _networks = networks;\n              });\n            },\n            child: const Text('Get supported networks')),\n      ),\n    );\n  }\n}"}},"/sdk-reference/flutter/getUserDetails":{"title":"userDetails Method","data":{"":"This method is used to get the current user details from the Okto SDK. It will only return the user details if the user is authenticated.","parameters#Parameters":"None","example#Example":"import 'package:flutter/material.dart';\nclass UserDetailsScreen extends StatefulWidget {\n  const UserDetailsScreen({super.key});\n  @override\n  State<UserDetailsScreen> createState() => _UserDetailsScreenState();\n}\nclass _UserDetailsScreenState extends State<UserDetailsScreen> {\n  UserDetails? _userDetails;\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n            onPressed: () async {\n              final userDetails = await okto.userDetails();\n              setState(() {\n                _userDetails = userDetails;\n              });\n            },\n            child: const Text('Get user details')),\n      ),\n    );\n  }\n}"}},"/sdk-reference/flutter/getWallets":{"title":"getWallets Method","data":{"":"This method is used to get all the wallets of the user across all chains. It will return the user wallets if authentication is successful.","example#Example":"import 'package:flutter/material.dart';\nimport 'package:okto_flutter_sdk/okto_wallet_sdk.dart';\nimport 'package:okto_test/okto.dart';\nclass UserDetailsScreen extends StatefulWidget {\n  const UserDetailsScreen({super.key});\n  @override\n  State<UserDetailsScreen> createState() => _UserDetailsScreenState();\n}\nclass _UserDetailsScreenState extends State<UserDetailsScreen> {\n  WalletResponse? _wallets;\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n            onPressed: () async {\n              final wallets = await okto.getWallets();\n              setState(() {\n                _wallets = wallets;\n              });\n            },\n            child: const Text('Get wallets')),\n      ),\n    );\n  }\n}"}},"/sdk-reference/flutter/logout":{"title":"logout Method","data":{"":"This method is used to logout the user from the Okto Wallet. It will only work if the user is already logged in.","parameters#Parameters":"None","example#Example":"import 'package:flutter/material.dart';\nimport 'package:okto_flutter_sdk/okto_wallet_sdk.dart';\nimport 'package:okto_test/okto.dart';\nclass OktoWalletFlutter extends StatefulWidget {\n  const OktoWalletFlutter({super.key});\n  @override\n  State<OktoWalletFlutter> createState() => _OktoWalletFlutter();\n}\nclass _OktoWalletFlutter extends State<OktoWalletFlutter> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n            onPressed: () async {\n              try {\n                await okto.logout();\n              } catch (e) {\n                print(e);\n              }\n            },\n            child: const Text('logout')),\n      ),\n    );\n  }\n}"}},"/sdk-reference/flutter/orderHistory":{"title":"orderHistory Method","data":{"":"This method is used to get the details of all the past orders of the current user.","parameters#Parameters":"orderId - The order id to get the specific order details.\noffset- The number of items to skip before starting to collect the result set. Default is 0.\nlimit - The number of items to return. Default is 1.\norderState - The order state to filter the orders. Possible values are PENDING, SUCCESS, FAILED.\nawait okto.orderHistory(\n  orderState: OrderState.success,\n  orderId: 'YOUR_ORDER_ID',\n  limit: 1,\n  offset: 0\n);","example#Example":"import 'package:flutter/material.dart';\nimport 'package:okto_flutter_sdk/okto_wallet_sdk.dart';\nimport 'package:okto_test/okto.dart';\nclass OktoWalletFlutter extends StatefulWidget {\n  const OktoWalletFlutter({super.key});\n  @override\n  State<OktoWalletFlutter> createState() => _OktoWalletFlutter();\n}\nclass _OktoWalletFlutter extends State<OktoWalletFlutter> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n            onPressed: () async {\n              try {\n                await okto.orderHistory(orderState: OrderState.success);\n              } catch (e) {\n                print(e);\n              }\n            },\n            child: const Text('Get order history')),\n      ),\n    );\n  }\n}"}},"/sdk-reference/flutter/showWidgetSheet":{"title":"showWidgetSheet Method","data":{"":"This method is used to open the Okto bottomsheet modal.","parameters#Parameters":"None","example#Example":"import 'package:flutter/material.dart';\nimport 'package:okto_test/okto.dart';\nclass OktoWalletFlutter extends StatefulWidget {\n  const OktoWalletFlutter({super.key});\n  @override\n  State<OktoWalletFlutter> createState() => _OktoWalletFlutter();\n}\nclass _OktoWalletFlutter extends State<OktoWalletFlutter> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n            onPressed: () async {\n              await okto.openBottomSheet(context: context);\n            },\n            child: const Text('open bottomSheet')),\n      ),\n    );\n  }\n}"}},"/sdk-reference/flutter/transferNFT":{"title":"transferNFT Method","data":{"":"This method is used to transfer NFT's from one wallet to another wallet.","parameters#Parameters":"operationType: The type of operation to be performed. In this case, it will be NFT_TRANSFER.\nquantity: The quantity of NFTs to be transferred.\nrecipientAddress: The address of the recipient account.\nnetworkName: The name of the network to perform the transfer on.\nYou can fetch the available network names from getSupportedNetworks\nnftAddress: The address of the NFT to be transferred.\ncollectionAddress: The address of the collection containing the NFT.\ncollectionName: The name of the collection containing the NFT.","example#Example":"import 'package:flutter/material.dart';\nimport 'package:okto_test/okto.dart';\nclass TransferNftScreen extends StatefulWidget {\n  const TransferNftScreen({super.key});\n  @override\n  State<TransferNftScreen> createState() => _TransferNftScreenState();\n}\nclass _TransferNftScreenState extends State<TransferNftScreen> {\n  @override\n  Widget build(BuildContext context) {\n    const operationType = 'NFT_TRANSFER';\n    const networkName = 'APTOS_TESTNET';\n    const collectionAddress = '';\n    const collectionName = 'super avengers';\n    const quantity = \"1\";\n    const recipientAddress = '';\n    const nftAddress = '';\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n          onPressed: () async {\n            try {\n              await okto.transferNft(\n                operationType: operationType,\n                networkName: networkName,\n                collectionAddress: collectionAddress,\n                collectionName: collectionName,\n                quantity: quantity,\n                recipientAddress: recipientAddress,\n                nftAddress: nftAddress,\n              );\n            } catch (e) {\n              print(e);\n            }\n          },\n          child: const Text('Transfer NFT'),\n        ),\n      ),\n    );\n  }\n}"}},"/sdk-reference/flutter/transferTokens":{"title":"transferTokens Method","data":{"":"This method is used to transfer tokens from one wallet to another wallet.","parameters#Parameters":"networkName - Name of the network to transfer funds.\nYou can fetch the available network names from getSupportedNetworks\ntokenAddress - Address of the token to transfer.\nrecipientAddress - Address of the recipient wallet.\nquantity - The amount of tokens to transfer.\ntry {\n  await okto.transferTokens(\n    networkName: networkName,\n    tokenAddress: tokenAddress,\n    quantity: quantity,\n    recipientAddress: recipientAddress,\n  );\n} catch (e) {\n  print(e);\n}","example#Example":"import 'package:flutter/material.dart';\nimport 'package:okto_flutter_sdk/okto_wallet_sdk.dart';\nimport 'package:okto_test/okto.dart';\nclass OktoWalletFlutter extends StatefulWidget {\n  const OktoWalletFlutter({super.key});\n  @override\n  State<OktoWalletFlutter> createState() => _OktoWalletFlutter();\n}\nclass _OktoWalletFlutter extends State<OktoWalletFlutter> {\n  TokenResponse? _tokens;\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: TextButton(\n            onPressed: () async {\n              try {\n                await okto.transferTokens(\n                  networkName: networkName,\n                  tokenAddress: tokenAddress,\n                  quantity: quantity,\n                  recipientAddress: recipientAddress,\n                );\n              } catch (e) {\n                print(e);\n              }\n            },\n            child: const Text('Transfer tokens')),\n      ),\n    );\n  }\n}"}},"/sdk-reference/react-native/authenticate":{"title":"authenticate Method","data":{"":"Authenticate user with idToken received from Google OAuth2.","parameters#Parameters":"idToken - Token received from Google OAuth2.\ncallback - Callback function to be called after authentication. This function contains two parameters:\nresult - if authentication is successful.\nerror - Error message if any.\nIf the user does not have a wallet, a wallet prompt will be shown to the user to create a wallet.\nauthenticate (\n  idToken: string,\n  callback: (result: any, error: any) => void\n) => void;","example#Example":"import {\n  useOkto,\n  type OktoContextType,\n} from 'okto-sdk-react-native';\nconst { authenticate } = useOkto() as OktoContextType;\nconst idToken = 'USER_ID_TOKEN';\nauthenticate(idToken, (result, error) => {\n    if (result) {\n        console.log('authentication successful');\n    }\n    if (error) {\n        console.error('authentication error:', error);\n    }\n});"}},"/sdk-reference/react-native/getNftOrderDetails":{"title":"getNftOrderDetails Method","data":{"":"This method is used to get all the NFT order details of the current user.","parameters#Parameters":"order_id - Order id of the NFT.\npage-  Page number for pagination. Default is 1.\nsize - Number of records per page. Default is 10.\ninterface NftOrderDetailsQuery {\n  page: number;\n  size: number;\n  order_id: string;\n}\ngetNftOrderDetails(\n    query: Partial<NftOrderDetailsQuery>\n  ): Promise<NftOrderDetailsData>;","example#Example":"import { useOkto, type OktoContextType, type NftOrderDetails} from 'okto-sdk-react-native';\nconst { getNftOrderDetails } = useOkto() as OktoContextType;\ngetNftOrderDetails({order_id: orderId})\n.then((orders) => {\n  const order = orders.find((order: any) => order.order_id === orderId);\n  if(order) console.log(order)\n})\n.catch((error) => {\n  console.error(`error:`, error);\n});"}},"/sdk-reference/react-native/getPortfolio":{"title":"getPortfolio Method","data":{"":"This method is used to get all the token assets in the user's portfolio.","parameters#Parameters":"None\ngetPortfolio(): Promise<Portfolio[]>;","example#Example":"import { useOkto, type OktoContextType, type Portfolio} from 'okto-sdk-react-native';\nconst { getPortfolio } = useOkto() as OktoContextType;\ngetPortfolio()\n  .then((result) => {\n          console.log(portfolio)\n      })\n      .catch((error) => {\n          console.error(`error:`, error);\n      });\n});"}},"/sdk-reference/react-native/getSupportedNetworks":{"title":"getSupportedNetworks Method","data":{"":"This method is used to get all whitelisted networks on your API Key.","parameters#Parameters":"None\ngetSupportedNetworks: () => Promise<NetworkData>;","example#Example":"import { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nconst { getSupportedNetworks } = useOkto() as OktoContextType;\ngetSupportedNetworks()\n    .then((result) => {\n    console.log(result)\n    })\n    .catch((error) => {\n    console.error(`error:`, error);\n    });"}},"/sdk-reference/react-native/getSupportedTokens":{"title":"getSupportedTokens Method","data":{"":"This method is used to get all whitelisted tokens on your API Key.","parameters#Parameters":"None\ngetSupportedTokens() => Promise<WalletData>;","example#Example":"import { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nconst { getSupportedTokens } = useOkto() as OktoContextType;\ngetSupportedTokens()\n    .then((result) => {\n    console.log(result)\n    })\n    .catch((error) => {\n    console.error(`error:`, error);\n    });"}},"/sdk-reference/react-native/getUserDetails":{"title":"getUserDetails Method","data":{"":"This method is used to get the current user details from the Okto SDK. It will only return the user details if the user is authenticated.","parameters#Parameters":"None\ngetUserDetails() => Promise<User>;","example#Example":"import { useOkto, type OktoContextType, type User} from 'okto-sdk-react-native';\nconst { getUserDetails } = useOkto() as OktoContextType;\ngetUserDetails()\n        .then((result) => {\n        console.log(result)\n        })\n        .catch((error) => {\n        console.error(`error:`, error);\n        });"}},"/sdk-reference/react-native/getWallets":{"title":"getWallets Method","data":{"":"This method is used to get all the wallets of the user across all chains. It will return the user wallets if authentication is successful.","parameters#Parameters":"None\ngetWallets() => Promise<WalletData>;","example#Example":"import { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nconst { getWallets } = useOkto() as OktoContextType;\ngetWallets()\n    .then((result) => {\n    console.log(result)\n    })\n    .catch((error) => {\n    console.error(`error:`, error);\n    });"}},"/sdk-reference/react-native/logout":{"title":"logout Method","data":{"":"This method is used to logout the user from the Okto Wallet. It will only work if the user is already logged in.","parameters#Parameters":"None\nlogout() => Promise<Boolean>;","example#Example":"import { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nconst { logout } = useOkto() as OktoContextType;\nlogout().then(result => console.log(\"logged out\"));"}},"/sdk-reference/react-native/orderHistory":{"title":"orderHistory Method","data":{"":"This method is used to get all the order details of the current user.","parameters#Parameters":"order_id - The order id to get the specific order details.\noffset-  The number of items to skip before starting to collect the result set. Default is 0.\nlimit - The number of items to return. Default is 10.\norder_state - The order state to filter the orders. Possible values are PENDING, SUCCESS, FAILED.\ninterface OrderQuery {\n  offset: number;\n  limit: number;\n  order_id: string;\n  order_state: string;\n}\norderHistory: (query?: Partial<OrderQuery>) => Promise<OrderData>;","example#Example":"import { useOkto, type OktoContextType, type Order} from 'okto-sdk-react-native';\nconst { orderHistory } = useOkto() as OktoContextType;\norderHistory({order_id: orderId})\n          .then((orders) => {\n            const order = orders.find((order: any) => order.order_id === orderId);\n            if(order) console.log(order)\n          })\n          .catch((error) => {\n            console.error(`error:`, error);\n          });"}},"/sdk-reference/react-native/setTheme":{"title":"setTheme Method","data":{"":"This method is used to customize the theme of the Okto Wallet Bottomsheet.","parameters#Parameters":"textPrimaryColor (optional) - Text primary color of the theme.\ntextSecondaryColor (optional) - Text secondary color of the theme.\ntextTertiaryColor (optional) - Text tertiary color of the theme.\naccentColor (optional) - Accent color of the theme.\naccent2Color (optional) - Accent2 color of the theme.\nstrokBorderColor (optional) - Stroke border color of the theme.\nstrokDividerColor (optional) - Stroke divider color of the theme.\nsurfaceColor (optional) - Surface color of the theme.\nbackgroundColor (optional) - Background color of the theme.\nsetTheme(\n    {\n        textPrimaryColor: string, \n        textSecondaryColor: string, \n        textTertiaryColor: string, \n        accentColor: string, \n        accent2Color: string, \n        strokBorderColor: string, \n        strokDividerColor: string, \n        surfaceColor: string, \n        backgroundColor: string\n    }\n) => void;","example#Example":"import { useOkto, type OktoContextType} from 'okto-sdk-react-native';\n \n \nconst { setTheme, getTheme } = useOkto() as OktoContextType;\nsetTheme({\n  textPrimaryColor: '0xFFFFFFFF',\n  textSecondaryColor: '0xFFFFFFFF',\n  textTertiaryColor: '0xFFFFFFFF',\n  accentColor: '0x80433454',\n  accent2Color: '0x80905BF5',\n  strokBorderColor: '0xFFACACAB',\n  strokDividerColor: '0x4DA8A8A8',\n  surfaceColor: '0xFF1F0A2F',\n  backgroundColor: '0xFF000000',\n});"}},"/sdk-reference/react-native/showWidgetSheet":{"title":"showWidgetSheet Method","data":{"":"This method is used to open the Okto bottomsheet modal.","parameters#Parameters":"None","example#Example":"import { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nconst { showWidgetSheet, closeBottomSheet } = useOkto() as OktoContextType;\nshowWidgetSheet();"}},"/sdk-reference/react-native/transferNFT":{"title":"transferNFT Method","data":{"":"This method is used to transfer NFT's from one wallet to another wallet.","parameters#Parameters":"operationType - Type of operation to perform. In our case it will be NFT_TRANSFER.\nquantity - The amount of nft to transfer.\nrecipientAddress - Address of the recipient wallet.\nnetworkName - Name of the network to transfer funds.\nnftId - Id of the NFT to transfer.\ncollectionAddress - Address of the collection from which to transfer the NFT.\ncollectionName - Name of the collection to transfer.\ntransferNft: (data: {\n  operation_type: string;\n  network_name: string;\n  collection_address: string;\n  collection_name: string;\n  quantity: string;\n  recipient_address: string;\n  nft_address: string;\n}) => Promise<TransferNftData>;","example#Example":"import { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nconst operationType = \"NFT_TRANSFER\"\nconst quantity = \"1\"\nconst recipientAddress = \"0x0FC096A53343C68c1086e626661A4bb31486A9e2\"\nconst networkName = \"POLYGON_TESTNET\"\nconst nftId = \"\"\nconst collectionAddress = \"\"\nconst collectionName = \"super avengers\"\ntransferNft({\n    operation_type: operationType,\n    network_name: networkName,\n    collection_address: collection_address,\n    collection_name: collection_name,\n    quantity: quantity,\n    recipient_address: recipientAddress,\n    nft_address: nftAddress\n}).then((result) => {\n    console.log(result)\n}).catch((error) => {\n    console.error(`error:`, error);\n});"}},"/sdk-reference/react-native/transferTokens":{"title":"transferTokens Method","data":{"":"This method is used to transfer tokens from one wallet to another wallet.","parameters#Parameters":"networkName - Name of the network to transfer funds.\ntokenAddress - Address of the token to transfer.\nrecipientAddress - Address of the recipient wallet.\nquantity - The amount of tokens to transfer.\ntransferTokens: (data: {\n  network_name: string;\n  token_address: string;\n  quantity: string;\n  recipient_address: string;\n}) => Promise<TransferTokensData>","example#Example":"import { useOkto, type OktoContextType} from 'okto-sdk-react-native';\nconst { transferTokens } = useOkto() as OktoContextType;\nconst networkName = \"POLYGON_TESTNET\"\nconst tokenAddress = \"x2f7b97837f2d14ba2ed3a4b2282e259126a9b848\"\nconst quantity = \"1\"\nconst recipientAddress = \"0x0FC096A53343C68c1086e626661A4bb31486A9e2\"\ntransferTokens({\n      network_name: networkName,\n      token_address: tokenAddress,\n      recipient_address: recipientAddress,\n      quantity: quantity\n  }).then((result) => {\n          console.log('Transfer success', result);\n  })\n  .catch((error) => {\n      console.log('Transfer error', error);\n  });"}},"/":{"title":"Okto Wallet SDK Docs","data":{"why-okto#Why Okto?":"In the fast-paced world of Web3, Okto Wallet is all about applications driving widespread adoption. We focus on crafting user-centric applications, making complex infrastructure invisible to end-users. Developers thrive in Web3 with Okto, as we handle the wallet complexities, allowing them to focus solely on creating top-notch applications without worrying about wallet safety and user trust.","okto-vs-other-wallet-sdks#Okto vs Other Wallet SDK's":"Point of Comparison\tOkto Wallet SDK\tOther Wallet SDKs\tChain Compatibility\tSupports all chains: EVM, Non-EVM, Solana, Aptos and support for Cosmos is Coming Soon\tLimited compatibility, often specific to certain chains\tFunctionality\tComprehensive toolkit for tokens, NFTs, and advanced contract interactions\tBasic functionalities with limited contract interaction\tApplication Consistency\tSingle SDK for all chains, ensuring uniformity across applications\tDifferent SDKs for different chains, causing inconsistency\tInteroperability\tWallet interoperable across multiple applications built on the Okto SDK\tLimited interoperability, often tied to specific applications\tSelf Custodial Security\tEnsures self-custodial security for user assets\tLack self-custodial features, relying on external custodians\tConsistent SDK Interface\tSDK interface remains consistent across different networks\tVaried SDK interfaces for different networks, leading to confusion\t\nFurthermore, we offer two distinct APIs for your development needs. The Client API is designed for apps interacting directly with users, while the Server to Server (S2S) API handles centralized admin tasks. Okto gives you the flexibility to choose the right API, whether you're building user-focused applications or managing backend operations seamlessly.Now, you might be wondering which API is right for you. That brings us to the next section.","which-api-to-use#Which API to use?":"Choosing between Client API and S2S API depends on your specific use case. We have a points of comparison to help you decide which API is best for your application.\nFeature\tClient API\tS2S API\tUser Intended App\tDesigned for user-facing applications (dApps)\tPrimarily used for Admin/Superadmin operations\tIndependence\tdApp functions independently of servers\tExecutes operations across all users centrally\tRuntime Logic\tHandles runtime application logic\tPerforms admin-related operations on behalf of users\tOffline Transactions\tLimited capability if user is offline\tEnables transactions even when users are offline\tExample Use Case\tSelling NFT: Requires both parties online\tSelling NFT: Servers can trade off-chain when users are offline\tAsync Portfolio Updates\tTypically not suitable for async updates\tIdeal for receiving asynchronous updates on portfolios","what-we-recommend#What we recommend?":"If you're building a user-focused app and need real-time interaction, go for the Client API. However, if you're dealing with admin tasks, offline transactions, or asynchronous updates, the S2S API is your go-to solution.","how-to-use-the-docs#How to use the docs?":"The docs are split into different sections to help you navigate through the Okto Wallet SDK.\nGetting Started: This section will guide you through the initial setup and installation of the Okto Wallet SDK.\nGuide: This section will help you understand the Okto Wallet SDK and its functionalities with detailed examples and use cases.\nSDK Reference: This section will provide you with detailed information for all the methods present in Okto Wallet SDK.\nAPI Reference: This section will provide you with detailed information about the Okto Wallet API, including methods, parameters, and responses.","supported-networks-and-tokens#Supported Networks and Tokens":"Wondering if Okto Wallet supports your preferred network or token?\nSimple answer: Yes, we do. Okto Wallet supports all tokens and chains, provided you've got the right permissions by whitelisting the network and tokens with Okto Team.\nGet in touch with the Okto Team","how-whitelisting-works#How whitelisting works":"To unlock the full collection of networks and tokens, a simple communication with our team will update the permissions for your API key. But let's not just talk theory; for your sandbox testing needs, we have already whitelisted some key networks with their native tokens.\nNetwork\tSOLANA_DEVNET\tPOLYGON_TESTNET\tAPTOS_TESTNET\tToken\tSOL\tMATIC\tAPT\t\nAnd as a bonus we have also whitelisted USDT token for all the networks.Some NFT contracts are also whitelisted for testing purposes.\nnetwork\tname\taddress\tAPTOS_TESTNET\tLion King 2\t\tAPTOS_TESTNET\tavengers\t\tAPTOS_TESTNET\tsuper avengers\t\tAPTOS\twarner bros\t\t\nIf you are convinced that Okto Wallet is the right choice for you and ready to get started, Let the coding adventure begin! 🚀"}}}